package com.muxxu.xmlapi {		import flash.events.SecurityErrorEvent;
	import com.adobe.crypto.MD5;
	import com.muxxu.xmlapi.events.MuxxuAPIEvent;
	import flash.events.IOErrorEvent;
	import flash.events.Event;
	import flash.net.URLLoader;
	import flash.events.EventDispatcher;
	import flash.net.URLRequestMethod;
	import flash.net.URLVariables;
	import flash.net.URLRequest;
	import flash.errors.IllegalOperationError;		/**	 * Singleton MuxxuAPI	 * 	 * @author Durss	 */	public class MuxxuAPI extends EventDispatcher {				public static const USER:String				= "user";		public static const FRIENDS:String			= "friends";		public static const USER_PRIV:String		= "user_priv";		public static const KINGDOM_USER:String		= "kingdom_user";		public static const KINGDOM_MAP:String		= "kingdom_map";		public static const KINGDOM_MAP_INFOS:String= "kingdom_mapinfos";		public static const KUBE_USER:String		= "kube_user";		public static const KUBE_ZONE:String		= "kube_zone";		public static const KUBE_PHOTO:String		= "kube_photo";				private static const _PUBLIC_URL:String		= "http://muxxu.com/app/xml?app={APP_NAME}&xml={DATA_TYPE}&id={UID}&key={KEY}";//		private static const _PRIVATE_URL:String	= "http://muxxu.com/app/xml?app={APP_NAME}&xml={DATA_TYPE}&id={UID}&key={KEY}";				private static var _instance:MuxxuAPI;				private var _userId:String;		private var _pubkey:String;		private var _appKey:String;		private var _appName:String;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>MuxxuAPI</code>.		 */		public function MuxxuAPI(enforcer:SingletonEnforcer) {			if(enforcer == null) {				throw new IllegalOperationError("A singleton can't be instanciated. Use static accessor 'getInstance()'!");			}		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter.		 */		public static function getInstance():MuxxuAPI {			if(_instance == null)_instance = new  MuxxuAPI(new SingletonEnforcer());			return _instance;			}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Initialize the singleton.		 * 		 * @param appName	application's name.		 * @param appKey	application's key.		 * @param userId	user ID.		 * @param pubkey	user's public key.		 */		public function initialize(appName:String, appKey:String, userId:String, pubkey:String):void {			_appName = appName;			_appKey = appKey;			_userId = userId;			_pubkey = pubkey;		}				/**		 * Gets the user informations.		 */		public function getInformations(infoId:String):void{			if(infoId == USER_PRIV || infoId == KUBE_USER) {							}else{				getPublicData(infoId);			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Gets a public data.		 */		private function getPublicData(id:String):void {			var key:String			= MD5.hash(_appKey + _pubkey);			var url:String			= _PUBLIC_URL;			url						= url.replace(/\{APP_NAME\}/gi, _appName);			url						= url.replace(/\{DATA_TYPE\}/gi, id);			url						= url.replace(/\{UID\}/gi, _userId);			url						= url.replace(/\{KEY\}/gi, key);			var request:URLRequest	= new URLRequest();			var vars:URLVariables	= new URLVariables();			request.method			= URLRequestMethod.GET;			request.data			= vars;			request.url				= url;			var loader:URLLoader	= new URLLoader();			loader.addEventListener(Event.COMPLETE,			loadCompleteHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR,	loadErrorHandler);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,	securityErrorHandler);			loader.load(request);		}
		private function securityErrorHandler(event:SecurityErrorEvent):void {			
		}
		/**		 * Called when a loading completes.		 */		private function loadCompleteHandler(event:Event):void {			var loader:URLLoader = event.currentTarget as URLLoader;			trace(loader.data);			dispatchEvent(new MuxxuAPIEvent(MuxxuAPIEvent.LOAD_DATA_COMPLETE));
		}		/**		 * Called if a loading fails.		 */		private function loadErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new MuxxuAPIEvent(MuxxuAPIEvent.LOAD_DATA_ERROR));
		}
	}}internal class SingletonEnforcer{}