package com.muxxu.kube.utils {	import com.muxxu.kube.events.LoadManagerEvent;	import flash.display.Loader;	import flash.display.Sprite;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.net.URLLoader;	/**	 * Singleton LoadManager.<br>	 * <br>	 * Takes Loader or URLoader instances and compute the global loaded percent.<br>	 * It does not compute the exact percent as it doesn't waits for all loading	 * starts. The percent is computed by splitting the global percent in X parts.	 * Where X is the number of loader objects.	 * 	 * @author @author Francois Dursus	 */	public class LoadManager extends EventDispatcher {				private static var _instance:LoadManager;		private var _loadStack:Array;		private var _enterFrameListener:Sprite;		private var _percent:Number;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>LoadManager</code>.<br>		 */		public function LoadManager(enforcer:SingletonEnforcer) {			if(enforcer == null) {				throw new IllegalOperationError("A singleton can't be instanciated. Use static accessor 'getInstance()'!");			}			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():LoadManager {			if(_instance == null)_instance = new  LoadManager(new SingletonEnforcer());			return _instance;			}				/**		 * Gets the loaded percent.		 */		public function get percent():Number { return _percent; }				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Adds an object to listen.		 */		public function addTarget(target:*):void {			if(!(target is Loader) && !(target is URLLoader)){				throw new IllegalOperationError("Target must be a Loader or an URLLoader reference.");				return;			}			if(_loadStack.length == 0){				dispatchEvent(new LoadManagerEvent(LoadManagerEvent.START));			}			_loadStack.push(target);		}				/**		 * Removes an object to listen.		 */		public function removeTarget(target:Loader):void {			if(_loadStack.length == 0) return;			var i:int, len:int;			len = _loadStack.length;			for(i = 0; i < len; ++i) {				if(_loadStack[i] == target) {					_loadStack.splice(i,1);					i --;					len --;				}			}						if(_loadStack.length == 0){				dispatchEvent(new LoadManagerEvent(LoadManagerEvent.COMPLETE));			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_loadStack = [];			_enterFrameListener = new Sprite();			_enterFrameListener.addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				/**		 * Called on ENTER_FRAME event.		 */		private function enterFrameHandler(e:Event):void {			if(_loadStack.length == 0) return;						var i:int, len:int, target:*, total:Number, p:Number;			len = _loadStack.length;			total = 0;			for(i = 0; i < len; ++i) {				target = _loadStack[i];				if(target is Loader) {					p = Loader(target).contentLoaderInfo.bytesLoaded / Loader(target).contentLoaderInfo.bytesTotal;					if(!isNaN(p)) total += p;				}				if(target is URLLoader) {					p = URLLoader(target).bytesLoaded / URLLoader(target).bytesTotal;					if(!isNaN(p)) total += p;				}			}						_percent = total / len;						if(_percent > 0 && _percent < 1) {				dispatchEvent(new LoadManagerEvent(LoadManagerEvent.PROGRESS, _percent));			}else if(_percent == 1){				dispatchEvent(new LoadManagerEvent(LoadManagerEvent.COMPLETE, _percent));			}						if(_percent == 1) _loadStack = [];		}	}}internal class SingletonEnforcer{}