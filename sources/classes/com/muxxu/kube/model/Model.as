package com.muxxu.kube.model {	import com.muxxu.kube.events.KTModelEvent;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Templates;	import com.muxxu.kube.vo.Texture;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.structure.mvc.model.IModel;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.filesystem.File;	import flash.net.FileFilter;	import flash.net.URLRequest;	import flash.utils.ByteArray;	/**	 * Application's model.	 * 	 * @author  Francois	 */	public class Model extends EventDispatcher implements IModel {				private const BROWSE_KPA:String		= "browseForKPA";		private const BROWSE_IMAGE:String	= "browseForImage";		private var _file:File;		private var _imageLoader:Loader;		private var _browseForType:String;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Model</code>.		 */		public function Model() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */				/**		 * Gets the current template ID to display.		 */		public function set currentViewId(value:String):void {			update(new Message(MessageIds.CHANGE_VIEW, value));		}				/**		 * Defines the texture type to use.<br>		 * <br>		 * Used by the <code>TextureSelector</code> to tell the <code>Generator</code>		 * which kind of texture using.		 */		public function set currentTexture(value:Texture):void {			update(new Message(MessageIds.CHANGE_TEXTURE, value));		}								/* ****** *		 * PUBLIC *		 * ****** */				/**		 * Sends a generic message ID to the views.		 */		public function sendMessage(value:String):void {			update(new Message(value));		}				/**		 * Starts the application.		 */		public function start():void { update(new Message(MessageIds.CHANGE_VIEW, Templates.DOLMENS)); }				/**		 * Open a browse window to load an image.		 */		public function browseForImage():void {			_browseForType = BROWSE_IMAGE;			_file.browse([new FileFilter("Image file", "*.jpg;*.jpeg;*.png;*.gif")]);		}				/**		 * Sets the BitmapData to draw on the generator's grid.		 */		public function setBitmapDataToDraw(bmd:BitmapData):void {			update(new Message(MessageIds.GENERATE_IMAGE, bmd));		}				/**		 * Changes the flatten ratio.		 */		public function changeColorsMax(nbr:int):void {			update(new Message(MessageIds.CHANGE_COLORS_MAX, nbr));		}				/**		 * Sets the image's editor content.		 */		public function setImageEditorContent(bmd:BitmapData):void {			update(new Message(MessageIds.IMAGE_LOADED, bmd));		}				/**		 * Saves an image to an external file.		 */		public function saveImage(data:ByteArray):void {			_file.save(data, "kube.kpa");		}				/**		 * Loads an image from an external file.		 */		public function loadImage():void {			_browseForType = BROWSE_KPA;			_file.browse([new FileFilter("KubeTools file", "*.kpa")]);		}		/**		 * Opens the tooltip.		 */		public function openToolTip(message:ToolTipMessage):void {			update(new Message(MessageIds.OPEN_TOOLTIP, message));		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_imageLoader = new Loader();			_file = new File();			_file.addEventListener(Event.SELECT, selectFileHandler);			_file.addEventListener(Event.CANCEL, cancelFileSelectionHandler);			_file.addEventListener(Event.COMPLETE, loadFileCompleteHandler);			_imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadImageCompleteHandler);		}		/**		 * Fires an update event to the views.		 */		private function update(message:Message):void {			dispatchEvent(new KTModelEvent(KTModelEvent.UPDATE, message));		}												//__________________________________________________________ FILE SELECTION				/**		 * Called when a file is selected for download.		 */		private function selectFileHandler(e:Event):void {			if(_browseForType == BROWSE_IMAGE){				_imageLoader.load(new URLRequest(_file.nativePath));				_browseForType = null;			}			if(_browseForType == BROWSE_KPA) {				_file.load();			}		}				/**		 * Called when a file's selection is cancelled.		 */		private function cancelFileSelectionHandler(e:Event):void {			_browseForType = null;		}		/**		 * Called when a file loading completes.		 * Used for KPA files loading.		 */		private function loadFileCompleteHandler(e:Event):void {			if(_browseForType == BROWSE_KPA) {				update(new Message(MessageIds.KPA_LOADED, _file.data));			}			_browseForType = null;		}												//__________________________________________________________ IMAGE LOADING		/**		 * Called when a bitmap file to generate is loaded.		 */		private function loadImageCompleteHandler(e:Event):void {			update(new Message(MessageIds.IMAGE_LOADED, Bitmap(_imageLoader.content).bitmapData));			_imageLoader.unload();		}			}}