package com.muxxu.kube.lcbridge {	import flash.display.MovieClip;	import flash.events.StatusEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.geom.Point;	import flash.net.LocalConnection;	import flash.utils.Timer;	import flash.utils.setTimeout;	/**	 * Bootstrap class of the application.	 * Must be set as the main class for the flex sdk compiler	 * but actually the real bootstrap class will be the factoryClass	 * designated in the metadata instruction (if defined).	 * 	 * @author Francois	 */	 	[SWF(width="50", height="50", backgroundColor="0xFFFFFF", frameRate="20")]	public class LCBridge extends MovieClip {				private var _timer:Timer;		private var _lcSend:LocalConnection;		private var _lastCoords:Point;		private var _lcReceive:LocalConnection;		private var _lastMessage:String;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Application</code>.<br>		 */		public function LCBridge() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called by the KubeTools to get the current zone.		 */		public function getCurrentZone():void {			if(_lastCoords != null) {				_lcSend.send("_kubeProfilerSend", "setZoneCoords", {x:_lastCoords.x, y:_lastCoords.y});				_lcSend.send("_kubeProfilerSend2", "setZoneCoords", {x:_lastCoords.x, y:_lastCoords.y});			}		}				/**		 * Sets the content of the tutorial bar.		 */		public function setTuto(label:String):void {			ExternalInterface.call("setTuto", label);		}				/**		 * Sets the content of the tutorial bar.		 */		public function setCoords(infos:String):void {			graphics.clear();			graphics.beginFill(0x0055ee, 1);			graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);			setTuto(infos);		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.<br>		 */		private function initialize():void {			_timer = new Timer(70);			_timer.addEventListener(TimerEvent.TIMER, ticTimerHandler);						graphics.clear();			graphics.beginFill(0x5500ee, 1);			graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);						_timer.start();			_lcSend = new LocalConnection();			_lcSend.addEventListener(StatusEvent.STATUS, statusEventHandler);						_lcReceive = new LocalConnection();			_lcReceive.client = this;			_lcReceive.allowDomain("*");			//			ExternalInterface.addCallback("setCoords", setCoords);			//			Security.allowDomain("*");			connect();		}				/**		 * Connects to the emmiter LocalConnection.		 */		private function connect():void {			try {				_lcReceive.connect("_kubeProfilerReceive");				_lcReceive.connect("_kubeProfilerReceive2");				graphics.clear();				graphics.beginFill(0x0000cc, 1);				graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);			}catch(e:Error){				setTimeout(connect, 1000);			}
		}
		/**		 * Called when LocalConnectionconnects		 */		private function statusEventHandler(event:StatusEvent):void {			switch (event.level) {				case "status":				graphics.clear();				graphics.beginFill(0x00cc00, 1);				graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);				break;			case "error":				graphics.clear();				graphics.beginFill(0xcc0000, 1);				graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);				break;			}		}						/**		 * Called on timer's tic to get the zone coordinates.		 */		private function ticTimerHandler(event:TimerEvent):void {			var getZoneInfos:XML = 		    <script><![CDATA[		            function(){ return document.getElementById('infos').innerHTML; }		        ]]></script>;		    		    try { 		        var text:String = ExternalInterface.call(getZoneInfos.toString()); 		    } catch (e:Error) { 		        //no JS DOM available.		        return;		    }		    		    if(text == null || text == _lastMessage) return;		    _lastMessage = text;		    		    if(_lastCoords != null) {			    //Toucher ce Dolmen ne vous sera pas utile car vous avez déjà découvert les zones des alentours...			    if(/Toucher ?.* ?Dolmen ?.* ?pas ?utile ? .* ?déjà ?découvert ?.* ?alentours/gi.test(text)) {					_lcSend.send("_kubeProfilerSend", "dolmenTouched", {x:_lastCoords.x, y:_lastCoords.y});					_lcSend.send("_kubeProfilerSend2", "dolmenTouched", {x:_lastCoords.x, y:_lastCoords.y});			    	return;				}			    			    //Toucher ce Dolmen vous a permis de découvrir de nouvelles zones sur votre carte du Monde de Kube !			    if(/Toucher ?.* ?Dolmen ?.* ?permis? .* ?découvrir ? .* ?nouvelles ?zones ?.* ?carte ?.* Kube/gi.test(text)) {					_lcSend.send("_kubeProfilerSend", "dolmenTouched", {x:_lastCoords.x, y:_lastCoords.y});					_lcSend.send("_kubeProfilerSend2", "dolmenTouched", {x:_lastCoords.x, y:_lastCoords.y});			    	return;				}								//Ramassage de forum				if(/return removeKube\(-?[0-9]+,-?[0-9]+,-?[0-9]+\)/gi.test(text)) {				text = text.replace(/.*(removeKube\(.*?\)).*/gi, "$1");				var matches:Array = text.match(/-?[0-9]+/gi);					_lcSend.send("_kubeProfilerSend", "kubeCoords", {x:parseInt(matches[0]), y:parseInt(matches[1]), z:parseInt(matches[2])});					_lcSend.send("_kubeProfilerSend2", "kubeCoords", {x:parseInt(matches[0]), y:parseInt(matches[1]), z:parseInt(matches[2])});				}		    }		    		    text = text.replace(/.*\[(-?[0-9]+)\] *\[(-?[0-9]+)\].*/gis, "$1/$2");		    var strCoord:Array = text.split("/");		    var coords:Point = new Point(parseInt(strCoord[0]), parseInt(strCoord[1]));						if(!isNaN(coords.x) && !isNaN(coords.y)) {				//If we entered in a new zone, send it to the KubeTools				if(_lastCoords == null || (coords.x != _lastCoords.x || coords.y != _lastCoords.y)) {					_lcSend.send("_kubeProfilerSend", "setZoneCoords", {x:coords.x, y:coords.y});					_lcSend.send("_kubeProfilerSend2", "setZoneCoords", {x:coords.x, y:coords.y});					_lastCoords = coords;				}			}					}			}}