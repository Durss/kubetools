package com.muxxu.kube.commands {	import com.ion.PNGDecoder;	import com.muxxu.kube.utils.LoadManager;	import com.nurun.core.commands.AbstractCommand;	import com.nurun.core.commands.events.CommandEvent;	import com.nurun.core.lang.Disposable;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.utils.ByteArray;	/**	 * 	 * @author Francois	 */	public class LoadKUBTextureCmd extends AbstractCommand implements Disposable {		private var _url:String;		private var _callback:Function;		private var _loader:URLLoader;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>LoadKUBTextureCmd</code>.		 */		public function LoadKUBTextureCmd(url:String, callback:Function) {			_callback = callback;			_url = url;			_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.BINARY;			_loader.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);			LoadManager.getInstance().addTarget(_loader);		}
						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function execute():void {			_loader.load(new URLRequest(_url));		}				/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			_loader.removeEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.removeEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);			_loader = null;			_callback = null;			_url = null;		}						/* ******* *		 * PRIVATE *		 * ******* */				/**		 * Called when loading completes.		 */		protected function loadCompleteHandler(event:Event):void {			var data:Array	= ByteArray(_loader.data).readObject();			try {				if(!(data[0] is ByteArray)) throw new Error("");				if(!(data[1] is ByteArray)) throw new Error("");				if(!(data[2] is ByteArray)) throw new Error("");				if(!(data[3] is ByteArray)) throw new Error("");				if(!(data[4] is ByteArray)) throw new Error("");				if(!(data[5] is ByteArray)) throw new Error("");				if(isNaN(data[6])) throw new Error("");				if(isNaN(data[7])) throw new Error("");			}catch(e:Error) {				dispatchEvent(new CommandEvent(CommandEvent.ERROR, "Invalid KUB file \"" + _url + "\"."));				return;			}						var d:ByteArray	= data[0];			d.position		= 1;			var i:int;			for(i = 0; i < 6; ++i) {				data[i] = new PNGDecoder().decode(data[i]);			}			data[8] = new PNGDecoder().decode(data[8]);						_callback(data);			dispatchEvent(new CommandEvent(CommandEvent.COMPLETE));		}
		/**		 * Called if loading fails.		 */		protected function loadErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new CommandEvent(CommandEvent.ERROR, "KUB file \"" + _url + "\" not found."));		}			}}