package com.muxxu.kube.commands {	import com.nurun.core.commands.AbstractCommand;	import com.nurun.core.commands.events.CommandEvent;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.ByteArray;	/**	 * XOR key : fdfd596dsfFD84fds54fs8fdsfiodgjfsdfg9264VBFduyfgeb0UZERSPOUh	 * 	 * @author Francois	 */	public class InitAtlCmd extends AbstractCommand {			[Embed(source="../../../../../../assets/crypto.swf", mimeType="application/octet-stream")]		private var _binaryClass:Class;		private var _binaryData:ByteArray;		private var _loader:Loader;		//This shit is the XOR key a bit encrypted.		private var _xork:String = "0\\x50\\x57\\x101\\x122\\x49\\x103\\x102\\x100\\x54\\x103\\x56\\x100\\x103\\x115\\x100\\x102\\x121\\x102\\x115\\x100\\x56\\x53\\x52\\x122\\x103\\x101\\x100\\x102\\x104\\x103\\x118\\x98\\x107\\x106\\x103\\x53\\x52\\x50\\x49\\x54\\x53\\x52\\x119\\x119\\x119\\x120\\x100\\x115\\x113\\x100\\x113";				/*         ******* HOW TO ENCRYPT THE KEY**********				var key:String = "fd9fd9sdfIFfd5fdohgfdIUFYDGYfd6985f9dFJHPSOUyfgfd5f8d98fd";		var ba:ByteArray = new ByteArray();		ba.writeUTF(key);		var i:int, len:int, crypt:String, xorref:String;		len = ba.length;		crypt = "";		for(i = 0; i < len; ++i) crypt += ba[i]+"\\\\x";		crypt = crypt.substr(0, crypt.length-3);		trace('crypt: ' + (crypt)); //CREPTED KEY		crypt = crypt.replace(/\\\\/g, "\\");				var a:Array = crypt.split("\\x");		len = a.length;		ba.position = 0;		for(i = 0; i < len; ++i) ba[i] = a[i];		xorref	= ba.readUTF();		trace('xorref: ' + (xorref)); //UNCRYPTED KEY		*/						
		/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>InitAtlCmd</code>.		 */		public function InitAtlCmd() {			_binaryData = new _binaryClass() as ByteArray;			//Decrypts the key			var a:Array = _xork.split("\\x");			var ba:ByteArray = new ByteArray();			var i:int, len:int, kLen:int, kIndex:int, xorref:String;			len = a.length;			for(i = 0; i < len; ++i) ba[i] = a[i];			xorref	= ba.readUTF();			len		= _binaryData.length;			kLen = xorref.length;						//decrypts the crypted SWF from the key.			for(i = 0; i < len; ++i) {				_binaryData[i] = _binaryData[i] ^ xorref.charCodeAt(kIndex);				if(++ kIndex >= kLen) kIndex=0;			}			_loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadingErrorHandler);		}
						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function execute():void {			var lc:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);			lc.allowLoadBytesCodeExecution = true;			_loader.loadBytes(_binaryData, lc);		}				public function dispose():void { }								/* ******* *		 * PRIVATE *		 * ******* */				/**		 * Called when loading completes.		 */		private function loadCompleteHandler(event:Event):void {			dispatchEvent(new CommandEvent(CommandEvent.COMPLETE));		}				/**		 * Called if loading fails.		 */		private function loadingErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new CommandEvent(CommandEvent.ERROR, "Crypto initialisation failed."));		}	}}