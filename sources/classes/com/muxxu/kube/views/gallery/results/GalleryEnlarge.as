package com.muxxu.kube.views.gallery.results {	import gs.TweenLite;	import com.muxxu.kube.data.GalleryData;	import com.muxxu.kube.events.GalleryDataEvent;	import com.muxxu.kube.views.gallery.components.GalleryPrevNextButton;	import com.muxxu.kube.vo.GalleryItem;	import com.nurun.components.bitmap.ImageResizerAlign;	import com.nurun.components.button.GraphicButton;	import com.nurun.components.invalidator.Invalidator;	import com.nurun.components.invalidator.Validable;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	[Event(name="prevImage", type="com.muxxu.kube.events.GalleryEnlargeEvent")]	[Event(name="nextImage", type="com.muxxu.kube.events.GalleryEnlargeEvent")]	/**	 * Displays the enlarge view for gallery items.	 * 	 * @author  Francois	 */	public class GalleryEnlarge extends Sprite implements Validable {				private const IMAGE_WIDTH:int = 400;		private const IMAGE_HEIGHT:int = 300;				private var _disableLayer:Sprite;		private var _image:GalleryResultItem;		private var _height:Number;		private var _width:Number;		private var _toolsCtn:Sprite;		private var _invalidator:Invalidator;		private var _prevBt:GraphicButton;
		private var _nextBt:GraphicButton;
		private var _currentItem:GalleryItem;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GalleryEnlarge</code>.		 */		public function GalleryEnlarge() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			_invalidator.invalidate();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			_invalidator.invalidate();		}		/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's height.		 */		override public function get height():Number { return _height; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Validates the component.		 */		public function validate():void {			_invalidator.flagAsValidated();			computePositions();		}				/**		 * Closes he image.		 */		public function close():void {			visible = false;			_image.close();//			_image.clear();//TODO		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			visible = false;			_width = _height = 1;						_invalidator = new Invalidator(this);						_disableLayer	= addChild(new Sprite()) as Sprite;			_image			= addChild(new GalleryResultItem(false, ImageResizerAlign.CENTER, true, true)) as GalleryResultItem;			_toolsCtn		= addChild(new Sprite()) as Sprite;			_prevBt			= addChild(new GalleryPrevNextButton(false)) as GraphicButton;			_nextBt			= addChild(new GalleryPrevNextButton(true)) as GraphicButton;						_toolsCtn.alpha = 0;			_image.setAutoSizeMode();						_nextBt.addEventListener(MouseEvent.CLICK,			clickHandler);			_prevBt.addEventListener(MouseEvent.CLICK,			clickHandler);			_disableLayer.addEventListener(MouseEvent.CLICK,	clickHandler);			_image.addEventListener(MouseEvent.ROLL_OVER,		rolloverHandler);			_toolsCtn.addEventListener(MouseEvent.ROLL_OVER,	rolloverHandler);			_image.addEventListener(MouseEvent.ROLL_OUT,		rolloutHandler);			_image.addEventListener(Event.COMPLETE,				loadImageCompleteHandler);			GalleryData.getInstance().addEventListener(GalleryDataEvent.ENLARGE_IMAGE, enlargeImageHandler);		}
		/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_disableLayer.graphics.clear();			_disableLayer.graphics.beginFill(0, .5);			_disableLayer.graphics.drawRect(0, 0, _width, _height);						_image.setMaxSizes(_width - 50, _height - 50);			_image.x = Math.round((_width - _image.width) * .5);			_image.y = Math.round((_height - _image.height) * .5);						_toolsCtn.x		= _image.x + Math.round(_image.width - _toolsCtn.width) - 5;			_toolsCtn.y		= _image.y + 5;						_prevBt.height = _nextBt.height = _image.height;			_prevBt.x		= _image.x - _prevBt.width;			_nextBt.x		= _image.x + _image.width;			_prevBt.y		= _image.y;			_nextBt.y		= _image.y;			_prevBt.validate();			_nextBt.validate();		}		/**		 * Called when image loading completes.		 */		private function loadImageCompleteHandler(e:Event):void {			computePositions();			_prevBt.visible = _currentItem.index > 0;			_nextBt.visible = _currentItem.index < _currentItem.loadedItems - 1;		}		/**		 * Called when the disable layer is clicked.		 */		private function clickHandler(e:MouseEvent):void {			if(e.currentTarget == _disableLayer) {				close();			}else if(e.currentTarget == _prevBt) {				GalleryData.getInstance().enlargeItem(_currentItem.index - 1);//				dispatchEvent(new GalleryEnlargeEvent(GalleryEnlargeEvent.PREV_IMAGE));			}else if(e.currentTarget == _nextBt) {				GalleryData.getInstance().enlargeItem(_currentItem.index + 1);//				dispatchEvent(new GalleryEnlargeEvent(GalleryEnlargeEvent.NEXT_IMAGE));			}		}
		/**		 * Called when the component is rolled over.		 */		private function rolloverHandler(e:MouseEvent):void {			TweenLite.to(_toolsCtn, .25, {autoAlpha:1});		}				/**		 * Called when the component is rolled out.		 */		private function rolloutHandler(e:MouseEvent):void {			TweenLite.to(_toolsCtn, .25, {autoAlpha:0});		}		/**		 * Called when an image should be displayed larger.		 */		private function enlargeImageHandler(e:GalleryDataEvent):void {			_currentItem = e.data as GalleryItem;			_image.width = IMAGE_WIDTH;			_image.height = IMAGE_HEIGHT;			_image.populate(e.data as GalleryItem);			visible = true;			_prevBt.visible = _nextBt.visible = false;			computePositions();		}	}}