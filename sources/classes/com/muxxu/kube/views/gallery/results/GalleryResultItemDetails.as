package com.muxxu.kube.views.gallery.results {	import com.muxxu.kube.components.form.VoteBar;	import com.muxxu.kube.data.GalleryData;	import com.muxxu.kube.events.VoteBarEvent;	import com.muxxu.kube.vo.GalleryItem;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	/**	 * Displasy the details about a gallery result item.	 * 	 * @author  Francois	 */	public class GalleryResultItemDetails extends Sprite {		private var _vote:VoteBar;		private var _width:Number;		private var _height:Number;		private var _title:CssTextField;		private var _infos:CssTextField;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GalleryResultItemDetails</code>.		 */		public function GalleryResultItemDetails() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Populates the details.		 */		public function populate(data:GalleryItem):void {			_title.text	= data.name;						var px:String = (data.zone.x == int.MAX_VALUE)? "?" : data.zone.x.toString();			var py:String = (data.zone.y == int.MAX_VALUE)? "?" : data.zone.y.toString();			_infos.text	= Label.getLabel("galleryItemInfo").replace(/\$\{author\}/gi, data.author).replace(/\$\{x\}/gi, px).replace(/\$\{y\}/gi, py);			if(data.oldWorld != null) {				_infos.text += "<br /><br /><span class=\"galleryBonusInfo\">* " + Label.getLabel("galleryOldWorld").replace(/\$\{nbr\}/gi, data.oldWorld)+"</span>";			}			_vote.populate(data);		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			_title	= addChild(new CssTextField("galleryItemTitle")) as CssTextField;			_infos	= addChild(new CssTextField("galleryItemInfo")) as CssTextField;			_vote	= addChild(new VoteBar()) as VoteBar;						_width	= 200;			_height	= 200;			filters			= [new DropShadowFilter(2, -90, 0, .3, 0, 10, 1, 3)];			_vote.filters	= [new GlowFilter(0xFFFFFF, 1, 4, 4, 1, 3)];			_title.mouseEnabled = false;			_infos.mouseEnabled = false;			_title.wordWrap = true;			_infos.wordWrap = true;						_vote.addEventListener(VoteBarEvent.VOTE, voteItemHandler);		}				/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_title.width	= _width - 6;			_infos.width	= _width - 6;						_vote.x			= Math.round((_width - _vote.width) * .5);			_vote.y			= Math.round(_height - _vote.height);			_infos.x		= 3;			_infos.y		= Math.round(_vote.y - _infos.height - 4);			_title.x		= 3;			_title.y		= Math.round(_infos.y - _title.height - 4);						graphics.clear();			graphics.beginFill(0xFFFFFF, .9);			graphics.drawRect(0, _title.y, _width, _height - _title.y);		}		/**		 * Called when the user votes for an image.		 */		private function voteItemHandler(e:VoteBarEvent):void {			GalleryData.getInstance().submitVote(e.note, e.id);		}			}}