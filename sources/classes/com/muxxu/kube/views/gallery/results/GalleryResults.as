package com.muxxu.kube.views.gallery.results {	import com.nurun.components.bitmap.ImageResizerAlign;
	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.data.GalleryData;	import com.muxxu.kube.events.GalleryDataEvent;	import com.muxxu.kube.vo.GalleryItem;	import com.nurun.components.invalidator.Invalidator;	import com.nurun.components.invalidator.Validable;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	/**	 * Displays the gallery's results	 * 	 * @author  Francois	 */	public class GalleryResults extends Sprite implements Validable {				private var _itemsPool:Vector.<GalleryResultItem>;		private var _width:Number;		private var _height:Number;		private var _invalidator:Invalidator;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GalleryResults</code>.		 */		public function GalleryResults() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			if(value == _width) return;			_width = value;			_invalidator.invalidate();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Sets the component's width without simply scaling it.		 */		override public function set height(value:Number):void {			if(value == _height) return;			_height = value;			_invalidator.invalidate();		}				/**		 * Gets the virtual component's height.		 */		override public function get height():Number { return _height; }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Validates the component's rendering.		 */		public function validate():void {			_invalidator.flagAsValidated();			computePositions();		}				/**		 * Clears the content to free memory.		 */		public function clear():void {			var item:GalleryResultItem;			while(numChildren > 0){				item = getChildAt(0) as GalleryResultItem;				item.clear();				removeChildAt(0);			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_itemsPool = new Vector.<GalleryResultItem>();			_invalidator = new Invalidator(this);						GalleryData.getInstance().addEventListener(GalleryDataEvent.ITEMS_LOADING_SUCCESS,	loadItemsSuccessHandler);			GalleryData.getInstance().addEventListener(GalleryDataEvent.ITEMS_LOADING_ERROR,	loadItemsErrorHandler);			GalleryData.getInstance().addEventListener(GalleryDataEvent.VOTE_SUBMIT_ERROR,		voteSubmitErrorHandler);			GalleryData.getInstance().addEventListener(GalleryDataEvent.VOTE_SUBMITTED,			voteSubmitSuccessHandler);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var i:int, len:int, px:int, py:int, hMax:int, item:GalleryResultItem;			var margins:int = 0;			len = numChildren;			px = margins;			py = margins;			for(i = 0; i < len; ++i) {				item = _itemsPool[i];				if(item.x != px || item.y != py){					item.x = px;					item.y = py;				}				px += item.width + margins;				hMax = Math.max(item.height, hMax);				if(px > _width - item.width) {					px = margins;					py += hMax + margins;					hMax = 0;				}			}		}				/**		 * Called when loading completes.		 */		private function loadItemsSuccessHandler(e:GalleryDataEvent):void {			var i:int, len:int, items:Vector.<GalleryItem>, item:GalleryResultItem;			//Create missing items in the pool			items = e.data as Vector.<GalleryItem>;			len = items.length - _itemsPool.length;			for(i = 0; i < len; ++i) {				_itemsPool.push(new GalleryResultItem(true, ImageResizerAlign.CENTER, true, false, 200, 150));			}						//Remove all items			while(numChildren > 0){ removeChildAt(0); }						//Create new items			len = items.length;			for(i = 0; i < len; ++i) {				item = _itemsPool[i];				item.populate(items[i], true);				addChild(item);			}			_invalidator.invalidate();		}				/**		 * Called if items loading fails.		 */		private function loadItemsErrorHandler(e:GalleryDataEvent):void {			var error:String = Label.getLabel("galleryLoadingError");			error = error.replace(/\$\{cause\}/gi, Label.getLabel("galleryFormServerError"+e.errorCode));			FrontControler.getInstance().error(error);		}				/**		 * Called if a vote submitting fails.		 */		private function voteSubmitErrorHandler(e:GalleryDataEvent):void {			var error:String = Label.getLabel("galleryVoteError");			error = error.replace(/\$\{cause\}/gi, Label.getLabel("galleryVoteError"+e.errorCode));			FrontControler.getInstance().error(error);		}		/**		 * Called when a vote submitting succeeds.		 */		private function voteSubmitSuccessHandler(e:GalleryDataEvent):void {					}	}}