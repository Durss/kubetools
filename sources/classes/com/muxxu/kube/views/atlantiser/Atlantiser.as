package com.muxxu.kube.views.atlantiser {	import gs.TweenLite;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.form.KubeCheckBox;	import com.muxxu.kube.components.form.KubeComboBox;	import com.muxxu.kube.components.form.KubeInput;	import com.muxxu.kube.components.form.KubeTextArea;	import com.muxxu.kube.components.tooltip.ToolTip;	import com.muxxu.kube.components.tooltip.content.TTTextContent;	import com.muxxu.kube.crypto.AMK1;	import com.muxxu.kube.crypto.AMK2;	import com.muxxu.kube.crypto.ATL2;	import com.muxxu.kube.crypto.ATL3;	import com.muxxu.kube.crypto.ATL4;	import com.muxxu.kube.crypto.events.ATLEvent;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.events.KTModelEvent;	import com.muxxu.kube.graphics.BBCodeIcon;	import com.muxxu.kube.graphics.EnterIcon;	import com.muxxu.kube.graphics.SmileyIcon;	import com.muxxu.kube.graphics.WordingIcon;	import com.muxxu.kube.views.AbstractKTView;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Templates;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.components.button.BaseButton;	import com.nurun.components.form.events.ListEvent;	import com.nurun.components.text.CssTextField;	import com.nurun.components.vo.Margin;	import com.nurun.structure.environnement.configuration.Config;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * Creates the Atlantiser for atlantes	 * 	 * @author  Francois	 */	public class Atlantiser extends AbstractKTView {				private var _encode:KubeButton;		private var _decode:KubeButton;		private var _input:KubeTextArea;		private var _output:KubeTextArea;		private var _decodeTitle:CssTextField;		private var _encodeTitle:CssTextField;		private var _keyInput:KubeInput;		private var _keyLabel:CssTextField;		private var _container:Sprite;		private var _smileyser:KubeCheckBox;
		private var _enteriser:KubeCheckBox;
		private var _wordiser:KubeCheckBox;
		private var _bbCodeiser:KubeCheckBox;
		private var _tooltip:ToolTip;
		private var _message:ToolTipMessage;
		private var _language:KubeComboBox;		
		private var _atl2:ATL2;		private var _atl3:ATL3;
		private var _amk1:AMK1;		private var _atl4:ATL4;		private var _amk2:AMK2;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Atlantiser</code>.		 */		public function Atlantiser() {					}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 */		override public function update(e:IModelEvent):void {			var message:Message = KTModelEvent(e).message;						if(message.id == MessageIds.CHANGE_VIEW){				if(message.data == Templates.ATLANTISER) {					show();					addChild(_container);				}else if(contains(_container)) {					hide();					removeChild(_container);				}			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		override protected function initialize():void {			super.initialize();						_container = addChild(new Sprite()) as Sprite;						_encodeTitle= _container.addChild(new CssTextField("windowTitle")) as CssTextField;			_decodeTitle= _container.addChild(new CssTextField("windowTitle")) as CssTextField;			_encode		= _container.addChild(new KubeButton("Crypter")) as KubeButton;			_decode		= _container.addChild(new KubeButton("Traduire")) as KubeButton;			_input		= _container.addChild(new KubeTextArea()) as KubeTextArea;			_output		= _container.addChild(new KubeTextArea()) as KubeTextArea;			_keyLabel	= _container.addChild(new CssTextField("windowTitle")) as CssTextField;			_keyInput	= _container.addChild(new KubeInput()) as KubeInput;			_language	= _container.addChild(new KubeComboBox("", false, true)) as KubeComboBox;			_smileyser	= _container.addChild(new KubeCheckBox("")) as KubeCheckBox;			_enteriser	= _container.addChild(new KubeCheckBox("")) as KubeCheckBox;			_wordiser	= _container.addChild(new KubeCheckBox("")) as KubeCheckBox;			_bbCodeiser	= _container.addChild(new KubeCheckBox("")) as KubeCheckBox;			_tooltip	= new ToolTip();			_message	= new ToolTipMessage(new TTTextContent(), null);						_smileyser.addChild(new SmileyIcon()).x = 20;			_enteriser.addChild(new EnterIcon()).x = 20;			_wordiser.addChild(new WordingIcon()).x = 20;			_bbCodeiser.addChild(new BBCodeIcon()).x = 20;						if(Config.getBooleanVariable("isEtnalta")) {				_language.addItemSkined("ATL2", 1);				_language.addItemSkined("ATL3", 2);				_language.addItemSkined("ATL4", 4);				_language.addItemSkined("AMK1", 3);				_language.addItemSkined("AMK2", 5);				BaseButton(_language.button).text = "ATL4";				_language.selectedIndex = _language.list.scrollableList.length - 3;			}else if(Config.getBooleanVariable("isKm")){				_language.addItemSkined("AMK1", 3);				_language.addItemSkined("AMK2", 5);				BaseButton(_language.button).text = "AMK2";				_language.selectedIndex = _language.list.scrollableList.length - 1;			}			_language.width = 100;			_language.validate();			_language.listHeight = _language.list.scrollableList.heightMax + 2;			_wordiser.enabled = false;						_smileyser.selected = SharedObjectManager.getInstance().smileyser;			_enteriser.selected = SharedObjectManager.getInstance().enteriser;			_wordiser.selected = SharedObjectManager.getInstance().wordiser;			_bbCodeiser.selected = SharedObjectManager.getInstance().bbCodeiser;						if(Config.getVariable("isEtnalta")) {				_atl2 = new ATL2();				_atl2.addEventListener(ATLEvent.ENCRYPT_PROGRESS, encryptCompleteHandler);				_atl2.addEventListener(ATLEvent.ENCRYPT_COMPLETE, encryptCompleteHandler);				_atl2.addEventListener(ATLEvent.DECRYPT_PROGRESS, decryptCompleteHandler);				_atl2.addEventListener(ATLEvent.DECRYPT_COMPLETE, decryptCompleteHandler);								_atl3 = new ATL3();				_atl3.addEventListener(ATLEvent.ENCRYPT_PROGRESS, encryptCompleteHandler);				_atl3.addEventListener(ATLEvent.ENCRYPT_COMPLETE, encryptCompleteHandler);				_atl3.addEventListener(ATLEvent.DECRYPT_PROGRESS, decryptCompleteHandler);				_atl3.addEventListener(ATLEvent.DECRYPT_COMPLETE, decryptCompleteHandler);								_atl4 = new ATL4();				_atl4.addEventListener(ATLEvent.ENCRYPT_PROGRESS, encryptCompleteHandler);				_atl4.addEventListener(ATLEvent.ENCRYPT_COMPLETE, encryptCompleteHandler);				_atl4.addEventListener(ATLEvent.DECRYPT_PROGRESS, decryptCompleteHandler);				_atl4.addEventListener(ATLEvent.DECRYPT_COMPLETE, decryptCompleteHandler);			}						_amk1 = new AMK1();			_amk1.addEventListener(ATLEvent.ENCRYPT_PROGRESS, encryptCompleteHandler);			_amk1.addEventListener(ATLEvent.ENCRYPT_COMPLETE, encryptCompleteHandler);			_amk1.addEventListener(ATLEvent.DECRYPT_PROGRESS, decryptCompleteHandler);			_amk1.addEventListener(ATLEvent.DECRYPT_COMPLETE, decryptCompleteHandler);						_amk2 = new AMK2();			_amk2.addEventListener(ATLEvent.ENCRYPT_PROGRESS, encryptCompleteHandler);			_amk2.addEventListener(ATLEvent.ENCRYPT_COMPLETE, encryptCompleteHandler);			_amk2.addEventListener(ATLEvent.DECRYPT_PROGRESS, decryptCompleteHandler);			_amk2.addEventListener(ATLEvent.DECRYPT_COMPLETE, decryptCompleteHandler);			//			if(SharedObjectManager.getInstance().encryptKeys.length == 0) {//				var keys:Array;//				if(Config.getBooleanVariable("isEtnalta")) {//					keys = ["","","","6e18d7fa604","6e18d7fa604"];//				}else if(Config.getBooleanVariable("isKm")){//					keys = ["6e18d7fa604","6e18d7fa604"];//				}//				SharedObjectManager.getInstance().encryptKeys = [];//			}						_encodeTitle.text = "Texte normal";			_decodeTitle.text = "Texte crypté";			_keyLabel.text = "Clé :";			_keyInput.textfield.restrict = "[0-9][a-z][A-Z]";			_keyInput.textfield.text = SharedObjectManager.getInstance().encryptKeys[_language.selectedIndex];						_input.textfield.embedFonts = false;			_output.textfield.embedFonts = false;			_encodeTitle.wordWrap	= true;			_decodeTitle.wordWrap	= true;						var i:int = 0;			_keyInput.tabIndex = i++;			_language.tabIndex = i++;			_input.tabIndex = i++;			_encode.tabIndex = i++;			_smileyser.tabIndex = i++;			_enteriser.tabIndex = i++;			_wordiser.tabIndex = i++;			_bbCodeiser.tabIndex = i++;			_output.tabIndex = i++;			_decode.tabIndex = i++;						_encode.contentMargin = new Margin(15, 5, 15, 5);			_decode.contentMargin = new Margin(15, 5, 15, 5);						_encode.addEventListener(MouseEvent.CLICK, clickButtonHandler);			_decode.addEventListener(MouseEvent.CLICK, clickButtonHandler);			_smileyser.addEventListener(Event.CHANGE, clickButtonHandler);			_enteriser.addEventListener(Event.CHANGE, clickButtonHandler);			_wordiser.addEventListener(Event.CHANGE, clickButtonHandler);			_bbCodeiser.addEventListener(Event.CHANGE, clickButtonHandler);						_smileyser.addEventListener(MouseEvent.ROLL_OVER, overButtonHandler);			_enteriser.addEventListener(MouseEvent.ROLL_OVER, overButtonHandler);			_wordiser.addEventListener(MouseEvent.ROLL_OVER, overButtonHandler);			_bbCodeiser.addEventListener(MouseEvent.ROLL_OVER, overButtonHandler);						_language.addEventListener(ListEvent.SELECT_ITEM, changeLanguageHandler);		}
		/**		 * Resizes and replaces the elements.		 */		override protected function computePositions(e:Event = null):void {			super.computePositions();						_encodeTitle.width =			_decodeTitle.width = 			_input.width	= 			_keyInput.width = 			_output.width	= 530;						_language.height = _keyInput.height;						_keyInput.width -= _keyLabel.width + 10;			_keyInput.width -= _language.width + 10;			_keyInput.height = _keyInput.textfield.textHeight + 8;			_keyInput.x		= Math.round(_keyLabel.width + 10);			_language.x		= Math.round(_keyInput.x + _keyInput.width + 10);						_encodeTitle.y	= Math.round(_keyInput.height + 15);			_input.y		= Math.round(_encodeTitle.y + _encodeTitle.height);			_smileyser.x	= 0;			_smileyser.y	= Math.round(_input.y + _input.height) + 5;			_enteriser.x	= Math.round(_smileyser.x + _smileyser.width + 30);			_enteriser.y	= _smileyser.y;			_wordiser.x		= Math.round(_enteriser.x + _enteriser.width + 30);			_wordiser.y		= _smileyser.y;			_bbCodeiser.x	= Math.round(_wordiser.x + _wordiser.width + 30);			_bbCodeiser.y	= _smileyser.y;			_encode.x		= Math.round((_input.width - _encode.width) * .5);			_encode.y		= Math.round(_smileyser.y + _smileyser.height) + 5;						_decodeTitle.y	= _encode.y + 15;			_output.y		= Math.round(_decodeTitle.y + _decodeTitle.height);			_decode.x		= Math.round((_output.width - _encode.width) * .5);			_decode.y		= Math.round(_output.y + _output.height) + 5;						_container.x	= Math.max(0, Math.round((_width - _container.width) * .5));			_container.y	= Math.max(0, Math.round((_height - (_decode.y + _decode.height)) * .5));		}				/**		 * Called when the language is changed.		 */		private function changeLanguageHandler(event:ListEvent):void {			_wordiser.enabled = event.data == 1;//			_keyInput.enabled = _language.selectedData != 3;						var key:String = SharedObjectManager.getInstance().encryptKeys[_language.selectedIndex];			_keyInput.text = key == null? "" : key;		}		/**		 * Called when a button is clicked.		 */		private function clickButtonHandler(event:Event):void {			var key:String = _keyInput.text;			if(key == null || key.length == 0) {				_keyInput.alpha = 1;				TweenLite.from(_keyInput, .5, {alpha:0});				if(stage.focus != _keyInput) {					stage.focus = _keyInput;				}				return;			}			var keys:Array = SharedObjectManager.getInstance().encryptKeys;			if(event.currentTarget == _encode) {				if(_language.selectedData == 1) {					_atl2.encrypt(_input.textfield.text, key);				}else if(_language.selectedData == 2) {					_atl3.encrypt(_input.textfield.text, key);				}else if(_language.selectedData == 3) {					_amk1.encrypt(_input.textfield.text, key);				}else if(_language.selectedData == 4) {					_atl4.encrypt(_input.textfield.text, key);				}else if(_language.selectedData == 5) {					_amk2.encrypt(_input.textfield.text, key);				}				keys[_language.selectedIndex] = key;				SharedObjectManager.getInstance().encryptKeys = keys;			}else if(event.currentTarget == _decode) {				if(_language.selectedData == 1) {					_atl2.decrypt(_output.textfield.text, key);				}else if(_language.selectedData == 2) {					_atl3.decrypt(_output.textfield.text, key);				}else if(_language.selectedData == 3) {					_amk1.decrypt(_output.textfield.text, key);				}else if(_language.selectedData == 4) {					_atl4.decrypt(_output.textfield.text, key);				}else if(_language.selectedData == 5) {					_amk2.decrypt(_output.textfield.text, key);				}				keys[_language.selectedIndex] = key;				SharedObjectManager.getInstance().encryptKeys = keys;			}else if(event.currentTarget == _smileyser) {				SharedObjectManager.getInstance().smileyser = _smileyser.selected;			}else if(event.currentTarget == _enteriser) {				SharedObjectManager.getInstance().enteriser = _enteriser.selected;			}else if(event.currentTarget == _wordiser) {				SharedObjectManager.getInstance().wordiser = _wordiser.selected;			}else if(event.currentTarget == _bbCodeiser) {				SharedObjectManager.getInstance().bbCodeiser = _bbCodeiser.selected;			}		}				/**		 * Called when a button is rolled over.		 */		private function overButtonHandler(event:MouseEvent):void {			var mess:String, target:KubeCheckBox;			target = event.currentTarget as KubeCheckBox;			if(target == _smileyser) mess = "Ajoute des smileys au message.";			if(target == _enteriser) mess = "Ajoute des retours à la ligne au message.";			if(target == _wordiser) mess = "Ajoute des zones de texte libre au message.<br /> Ces zones sont représentées par des \"<b>###texte###</b>\". Vous pouvez écrir ce que vous voulez à la place de ceci. Il n'est pas nécessaire de conserver les <b>###</b>. Attention simplement à ne pas supprimer les espaces avant et après.";			if(target == _bbCodeiser) mess = "Ajoute des balises de formatage au message.";			TTTextContent(_message.content).populate(mess);			TTTextContent(_message.content).width = 200;			_message.target = target;			_tooltip.open(_message);			_tooltip.x = Math.max(0, Math.round(target.x + (target.width - _tooltip.width) * .5));			_tooltip.y = Math.round(target.y - _tooltip.height - 2);			_container.addChild(_tooltip);		}				/**		 * Called when encryption completes.		 */		private function encryptCompleteHandler(event:ATLEvent):void {			var i:int, len:int, inc:int, rnd:int, smileys:Array, brs:Array, bbs:Array, open:Boolean, code:String, char:String, space:String;			var res:String = event.text;			if(event.type == ATLEvent.DECRYPT_COMPLETE || event.type == ATLEvent.ENCRYPT_COMPLETE) {				len = res.length;				brs = [".<br />", ".<br />", ".<br />", ".<br /><br />", ".<br /><br /><br />"];				bbs = ["i", "g", "cite", "i", "g", "cite", "i", "g", "cite", "i", "g", "cite", "i", "g", "cite", "spoil", "spoil"];				smileys = [":)", ":D", ":)", ":D", ":lol:", ":)", ":D", ":lol:", ":)", ":D", ":lol:", ":innocent:", ":innocent:", ":("];				inc = Math.floor(Math.random() * 50) + 20;				open = true;				space = " ";								if(event.currentTarget == _atl3 || event.currentTarget == _atl4 || event.currentTarget == _amk1 || event.currentTarget == _amk2) {					space = "";					while((i += Math.random() * 15 + 2) < len) {						char = res.charAt(i);						res = res.substr(0, i) + " " + res.substr(i);					}				}								for(i = inc; i < len; i+=inc) {					i = res.indexOf(" ", i);					rnd = Math.round(Math.random() * 4);					if(_smileyser.selected && rnd == 0) {						res = res.substr(0, i) + " " + smileys[Math.floor(Math.random() * smileys.length)] + res.substr(i);					}else if(_enteriser.selected && rnd == 1) {						res = res.substr(0, i) + space + brs[Math.floor(Math.random() * brs.length)] + res.substr(i);					}else if(_wordiser.selected && _wordiser.enabled && rnd == 2) {						res = res.substr(0, i) + " ###texte### " + res.substr(i);					}else if(_bbCodeiser.selected && rnd == 3	) {						if(!open){							code = "/"+code;						}else{							code = bbs[Math.floor(Math.random() * bbs.length)];						}						res = res.substr(0, i) + space + ".[" + code + "]" + res.substr(i);						open = !open;					}					inc = Math.round(Math.random() * 50) + 20;				}				if(!open) {					res += "[/"+code+"]";				}			}			_output.textfield.text = res+".";			_output.vScroll.percent = 0;			_output.update(true);		}				/**		 * Called when decryption completes.		 */		private function decryptCompleteHandler(event:ATLEvent):void {			_input.textfield.text = event.text.replace(/</gis, "&lt;");			_input.vScroll.percent = 0;			_input.update(true);		}			}}