package com.muxxu.kube.views.ads.components {	import com.nurun.core.lang.Disposable;
	import com.muxxu.kube.components.tooltip.content.TTTextContent;	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.vo.Texture;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.components.text.CssTextField;	import com.nurun.utils.bitmap.BitmapUtils;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Matrix;	/**	 * 	 * @author Francois	 */	public class KubeAdEntry extends Sprite implements Disposable {		private var _texture:Texture;		private var _number:String;		private var _bmd:BitmapData;
//		private var _preview:Bitmap;
//		private var _number:CssTextField;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>KubeAdEntry</code>.		 */		public function KubeAdEntry(texture:Texture, number:String) {			_number = number;			_texture = texture;			initialize();//			_number.text = number;//			_number.x = Math.round(_preview.width  + 2);//			_number.y = Math.round((_preview.height - _number.height) * .5);			//			graphics.beginFill(0xff0000, 0);//			graphics.drawRect(0, 0, _number.x + _number.width, _preview.height);//			graphics.endFill();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			graphics.clear();			removeEventListener(MouseEvent.ROLL_OVER, rollOverHandler);		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			var img:BitmapData		= BitmapUtils.resampleBitmapData(_texture.preview, .5);			var preview:BitmapData	= img;			var tf:CssTextField = new CssTextField("adsKubeStepperLabel");			tf.text = _number.toString();						_bmd = new BitmapData(preview.width + 5 + tf.width, Math.max(preview.height, tf.height), false, 0xff69B9DA);			_bmd.lock();			_bmd.draw(preview);						var m:Matrix = new Matrix();			m.translate(preview.width + 5, 0);			_bmd.draw(tf, m);						graphics.beginBitmapFill(_bmd);			graphics.drawRect(0, 0, _bmd.width, _bmd.height);			graphics.endFill();						tf.dispose();			preview = null;						addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);		}				/**		 * Called when the component is rolled over.		 */		private function rollOverHandler(event:MouseEvent):void {			event;			var message:ToolTipMessage = new ToolTipMessage(new TTTextContent(true, _texture.name), this);			FrontControler.getInstance().openToolTip(message);
		}
	}}