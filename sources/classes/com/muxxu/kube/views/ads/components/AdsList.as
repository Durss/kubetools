package com.muxxu.kube.views.ads.components {	import flash.events.Event;
	import gs.TweenLite;	import com.muxxu.kube.components.LoaderSpinning;	import com.muxxu.kube.components.tooltip.ToolTip;	import com.muxxu.kube.components.tooltip.content.TTTextContent;	import com.muxxu.kube.data.AdsData;	import com.muxxu.kube.events.AdsDataEvent;	import com.muxxu.kube.vo.Ad;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.utils.setTimeout;	/**	 * 	 * @author Francois	 */	public class AdsList extends Sprite {				private var _tooltip:ToolTip;
		private var _items:Vector.<AdEntry>;
		private var _ads:Vector.<Ad>;
		private var _width:Number;
		private var _height:Number;
		private var _spinning:LoaderSpinning;
		private var _freeze:*;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AdsList</code>.		 */		public function AdsList() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the width of the component without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;		}				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Loads the ads.		 */		public function load():void {			clearList();			AdsData.getInstance().load();			_spinning.open();			TweenLite.to(_freeze, .25, {autoAlpha:1});		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_tooltip	= addChild(new ToolTip()) as ToolTip;			_freeze		= addChild(new Sprite()) as Sprite;			_spinning	= addChild(new LoaderSpinning()) as LoaderSpinning;						_spinning.alpha = 0;			_spinning.visible = false;						AdsData.getInstance().addEventListener(AdsDataEvent.GET_ADS_COMPLETE, adsLoadingResultHandler);			AdsData.getInstance().addEventListener(AdsDataEvent.GET_ADS_ERROR, adsLoadingResultHandler);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_spinning.x = _width * .5;			_spinning.y = _height * .5;						_freeze.graphics.clear();			_freeze.graphics.beginFill(0, .5);			_freeze.graphics.drawRect(0, 0, _width, _height);			_freeze.graphics.endFill();						if(_items == null) return;			var i:int, len:int, py:int;			len = _items.length;			for(i = 0; i < len; ++i) {				_items[i].width = _width;				_items[i].y = py;				py += Math.round(_items[i].height + 1);			}		}		/**		 * Called when ads loading completes.		 */		private function adsLoadingResultHandler(event:AdsDataEvent):void {			_spinning.close();			TweenLite.to(_freeze, .25, {autoAlpha:0});			if(event.resultCode > 0) {				addChild(_tooltip);				_tooltip.open(new ToolTipMessage(new TTTextContent(true, Label.getLabel("adsLoadServerError"+event.resultCode), "tooltipContentError"), null));				_tooltip.x = Math.round((_width - _tooltip.width) * .5);				_tooltip.y = Math.round((_height - _tooltip.height) * .5);				setTimeout(_tooltip.close, 2000);				setTimeout(closeToolTip, 2500);
			}else{				_ads = event.ads;				createList();			}		}				/**		 * Called when the tooltip is closed.		 */		private function closeToolTip():void {			removeChild(_tooltip);			dispatchEvent(new Event(Event.RESIZE));
		}
		/**		 * Creates the items.		 */		private function createList():void {			_items = new Vector.<AdEntry>();			var i:int, len:int, item:AdEntry;			len = _ads.length;			_items = new Vector.<AdEntry>(len, true);			for(i = 0; i < len; ++i) {				item = addChildAt(new AdEntry(_ads[i]), 0) as AdEntry;				_items[i] = item;			}			computePositions();
		}
				/**		 * Clears all the items.		 */		private function clearList():void {			if(_items == null) return;			var i:int, len:int;			len = _items.length;			for(i = 0; i < len; ++i) {				_items[i].dispose();				removeChild(_items[i]);			}			_items = null;
		}
	}}