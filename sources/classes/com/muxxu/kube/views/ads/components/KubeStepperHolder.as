package com.muxxu.kube.views.ads.components {	import com.muxxu.kube.data.TexturesData;	import com.muxxu.kube.vo.Texture;	import flash.display.Sprite;	/**	 * Displays kube steppers.	 * 	 * @author Francois	 */	public class KubeStepperHolder extends Sprite {				private var _steppers:Vector.<KubeStepper>;
		private var _width:Number;
		private var _tabIndex:int;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>KubeStepperHolder</code>.		 */		public function KubeStepperHolder() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the container's width.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Gets the form data of the component.		 */		public function get formData():String {			var str:String = "";			var i:int, len:int;			len = _steppers.length;			for(i = 0; i < len; ++i) {				if(_steppers[i].value > 0) {					str += _steppers[i].texture.id + "=" + _steppers[i].value + ";";				}			}			str = str.substr(0, str.length - 1);			return str;		}				/**		 * Sets the component's tabIndex		 */		override public function set tabIndex(value:int):void {			_tabIndex = value;			var i:int, len:int;			len = _steppers.length;			for(i = 0; i < len; ++i) {				_steppers[i].tabIndex = value + i;			}		}				/**		 * Gets the maximum component's tabIndex		 */		public function get tabIndexMax():int { return _tabIndex + _steppers.length; }						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_steppers = new Vector.<KubeStepper>();			var i:int, len:int, textures:Vector.<Texture>, stepper:KubeStepper;			len = TexturesData.getInstance().length;			textures = TexturesData.getInstance().textures;						for(i = 0; i < len; ++i) {				stepper = new KubeStepper(textures[i]);				stepper.tabIndex = i;				_steppers.push(stepper);				addChild(stepper);			}		}				/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var i:int, px:int, py:int, len:int;			len = _steppers.length;			for(i = 0; i < len; ++i) {				_steppers[i].x = px;				_steppers[i].y = py;				px += _steppers[i].width - 20;				if(px > _width - _steppers[i].width + 10) {					px = 0;					py += _steppers[i].height + 3;				}			}		}			}}