package com.muxxu.kube.views.ads.components {	import com.muxxu.kube.data.TexturesData;	import com.muxxu.kube.vo.Ad;	import com.muxxu.kube.vo.Texture;	import com.nurun.components.text.CssTextField;	import com.nurun.core.lang.Disposable;	import flash.display.Sprite;	/**	 * 	 * @author Francois	 */	public class AdEntry extends Sprite {		private var _data:Ad;		private var _title:CssTextField;
		private var _kubes:Vector.<KubeAdEntry>;
		private var _width:Number;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AdEntry</code>.		 */		public function AdEntry(data:Ad) {			_data = data;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			while(numChildren > 0) {				if(getChildAt(0) is Disposable) Disposable(getChildAt(0)).dispose();				removeChildAt(0);			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_title		= addChild(new CssTextField("adsEntryTitle")) as CssTextField;			_title.text	= _data.title;						createKubes();		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var i:int, len:int, px:int, py:int;			len = _kubes.length;			px = Math.round(_title.width + 15);			for(i = 0; i < len; ++i) {				_kubes[i].x = px;				_kubes[i].y = py;				px += Math.round(_kubes[i].width + 4);				if(px + _kubes[i].width + 2 > _width) {					px = 0;					py += Math.round(_kubes[i].height + 2);				}			}			graphics.clear();			graphics.beginFill(0x69B9DA, 1);			graphics.drawRect(0, 0, Math.max(width, _width), height);			graphics.beginFill(0x265367, 1);			graphics.drawRect(0, height, Math.max(width, _width), 1);			graphics.endFill();		}				/**		 * Creates the kubes instances.		 */		private function createKubes():void {			var i:int, len:int, chunks:Array, texture:Texture, kube:KubeAdEntry;			chunks = _data.kubes.split(";");			len = chunks.length;			_kubes = new Vector.<KubeAdEntry>();			for(i = 0; i < len; ++i) {				texture = TexturesData.getInstance().getTextureById(chunks[i].split("=")[0]);				kube = addChild(new KubeAdEntry(texture, chunks[i].split("=")[1])) as KubeAdEntry;				_kubes[i] = kube;			}		}			}}