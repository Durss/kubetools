package com.muxxu.kube.views.ads.components {	import com.muxxu.kube.components.tooltip.content.TTTextContent;
	import com.muxxu.kube.vo.ToolTipMessage;
	import com.muxxu.kube.controler.FrontControler;
	import gs.TweenLite;
	import flash.ui.Keyboard;
	import flash.events.KeyboardEvent;
	import flash.events.Event;
	import flash.text.TextFieldType;
	import com.nurun.utils.math.MathUtils;
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	import com.nurun.components.button.events.NurunButtonEvent;
	import flash.events.MouseEvent;
	import com.muxxu.kube.graphics.AddKubeGraphic;	import com.muxxu.kube.graphics.DelKubeGraphic;	import com.muxxu.kube.vo.Texture;	import com.nurun.components.button.GraphicButton;	import com.nurun.components.button.visitors.FrameVisitor;	import com.nurun.components.text.CssTextField;	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.filters.GlowFilter;	/**	 * 	 * @author Francois	 */	public class KubeStepper extends Sprite {		private var _texture:Texture;		private var _preview:Bitmap;
		private var _addBt:GraphicButton;
		private var _delBt:GraphicButton;
		private var _textfield:CssTextField;
		private var _value:int;
		private var _inc:int;
		private var _timer:Timer;
		private static var _pressed:Boolean;
		private var _over:Boolean;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>KubeStepper</code>.		 */		public function KubeStepper(texture:Texture) {			_texture = texture;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the tab index.		 */		override public function set tabIndex(value:int):void { _textfield.tabIndex = value; }				/**		 * Gets the component's value.		 */		public function get value():int { return _value; }				/**		 * Gets the component's texture.		 */		public function get texture():Texture { return _texture; 		}
						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_preview	= addChild(new Bitmap(_texture.preview.clone())) as Bitmap;			_textfield	= addChild(new CssTextField("adsKubeStepperLabel")) as CssTextField;			_addBt		= addChild(new GraphicButton(null, new AddKubeGraphic())) as GraphicButton;			_delBt		= addChild(new GraphicButton(null, new DelKubeGraphic())) as GraphicButton;						_value = 0;			_textfield.text = "0";			_textfield.type = TextFieldType.INPUT;			_textfield.restrict = "0-9";			_textfield.filters = [new GlowFilter(0xffffff, 1, 1.5, 1.5, 10, 3)];						_timer = new Timer(80);			_timer.addEventListener(TimerEvent.TIMER, ticTimerHandler);						var fv:FrameVisitor = new FrameVisitor();			fv.addTarget(_addBt.icon as MovieClip);			_addBt.accept(fv);						fv = new FrameVisitor();			fv.addTarget(_delBt.icon as MovieClip);			_delBt.accept(fv);						_preview.alpha = .35;			_addBt.alpha = _delBt.alpha = 0;			_addBt.visible = _delBt.visible = false;						_preview.x	= _delBt.width - 2;			_addBt.x	= _preview.x + _preview.width + 1;			_textfield.x= _preview.x - 2;			_textfield.y= Math.round((_preview.height - _textfield.height) * .5) + 2;			_textfield.width = _preview.width + 4;						_addBt.addEventListener(NurunButtonEvent.PRESS, pressHandler);			_delBt.addEventListener(NurunButtonEvent.PRESS, pressHandler);			_addBt.addEventListener(NurunButtonEvent.RELEASE, releaseHandler);			_delBt.addEventListener(NurunButtonEvent.RELEASE, releaseHandler);			_addBt.addEventListener(NurunButtonEvent.RELEASE_OUTSIDE, releaseHandler);			_delBt.addEventListener(NurunButtonEvent.RELEASE_OUTSIDE, releaseHandler);			_textfield.addEventListener(Event.CHANGE, changeHandler);			addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);			addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);			addEventListener(MouseEvent.ROLL_OUT, rollOutHandler);		}
								//__________________________________________________________ MOUSE EVENTS		/**		 * Called when the component is rolled over.		 */		private function rollOverHandler(event:MouseEvent):void {			if(_pressed) return;			parent.addChild(this);			_over = true;			TweenLite.to(_addBt, .25, {autoAlpha:1});			TweenLite.to(_delBt, .25, {autoAlpha:1});			var message:ToolTipMessage = new ToolTipMessage(new TTTextContent(true, _texture.name), this);			FrontControler.getInstance().openToolTip(message);		}		/**		 * Called when the component is rolled out.		 */		private function rollOutHandler(event:MouseEvent = null):void {			_over = false;			if(_pressed) return;			TweenLite.to(_addBt, .25, {autoAlpha:0});			TweenLite.to(_delBt, .25, {autoAlpha:0});		}
		/**		 * Called when a button is clicked.		 */		private function pressHandler(event:NurunButtonEvent):void {			_pressed = true;			_inc = (event.currentTarget == _addBt)? 1 : -1;			ticTimerHandler();			_timer.start();		}		/**		 * Called when a button is released.		 */		private function releaseHandler(event:NurunButtonEvent):void {			_pressed = false;			_timer.reset();			_timer.stop();			if(!_over) {				rollOutHandler();			}		}				/**		 * Called on mouse wheel event.		 */		private function mouseWheelHandler(event:MouseEvent):void {			_inc = MathUtils.sign(event.delta);			ticTimerHandler();		}								//__________________________________________________________ KEYBOARD EVENT				/**		 * Called when a key is pressed.		 */		private function keyDownHandler(event:KeyboardEvent):void {			if(stage.focus != _textfield) return;						if(event.keyCode == Keyboard.UP) {				_inc = 1;				ticTimerHandler();			}else if(event.keyCode == Keyboard.DOWN) {				_inc = -1;				ticTimerHandler();			}		}								//__________________________________________________________ TIMER EVENT		/**		 * Called on timer's tic.		 */		private function ticTimerHandler(event:TimerEvent = null):void {			_value += _inc;			_value = MathUtils.restrict(_value, 0, 9999);			_textfield.text = _value.toString();			_preview.alpha = (_value > 0)? 1 : .35;		}								//__________________________________________________________ TEXTFIELD EVENT				/**		 * Called when textfield's value changes.		 */		private function changeHandler(event:Event):void {			_value = parseInt(_textfield.text);			_inc = 0;			ticTimerHandler();		}
	}}