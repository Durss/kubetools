package com.muxxu.kube.views.ads.components {	import gs.TweenLite;	import com.muxxu.kube.components.LoaderSpinning;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.button.OpenCloseFormButton;	import com.muxxu.kube.components.form.KubeInput;	import com.muxxu.kube.components.form.KubeTextArea;	import com.muxxu.kube.data.AdsData;	import com.muxxu.kube.events.AdsDataEvent;	import com.nurun.components.button.TextAlign;	import com.nurun.components.form.events.FormComponentEvent;	import com.nurun.components.text.CssTextField;	import com.nurun.components.vo.Margin;	import com.nurun.structure.environnement.label.Label;	import flash.display.DisplayObject;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	/**	 * Displays the add ad form.	 * 	 * @author Francois	 */	public class AddAdForm extends Sprite {				private var _width:Number = 10;		private var _height:Number = 10;		private var _openCloseBar:OpenCloseFormButton;		private var _mask:Shape;		private var _opened:Boolean;		private var _formCtn:Sprite;		private var _spin:LoaderSpinning;		private var _steppers:KubeStepperHolder;
		private var _tweening:Boolean;
		private var _title:KubeInput;
		private var _description:KubeTextArea;
		private var _titleTxt:CssTextField;
		private var _descriptionTxt:CssTextField;
		private var _submitBt:KubeButton;
		private var _stepperTxt:CssTextField;
		private var _resultTxt:CssTextField;
		private var _timerClear:Timer;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AddAdForm</code>.		 */		public function AddAdForm() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's hright.		 */		override public function get height():Number { return _mask.height; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the form.		 */		public function open():void {			_opened = true;			_tweening = true;			addChild(_formCtn);			TweenLite.to(this, .5, {height:_formCtn.y + _formCtn.height + 10, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)], onComplete:onTweenComplete});		}				/**		 * Closes the form.		 */		public function close():void {			_opened = false;			_tweening = true;			_resultTxt.text	= "";			TweenLite.to(this, .5, {height:_openCloseBar.height, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)], onComplete:onTweenComplete});		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_timerClear		= new Timer(5000, 1);			_openCloseBar	= addChild(new OpenCloseFormButton(Label.getLabel("adsFormOpener"))) as OpenCloseFormButton;			_formCtn		= new Sprite();			_titleTxt		= _formCtn.addChild(new CssTextField("galleryFormLabel")) as CssTextField;			_title			= _formCtn.addChild(new KubeInput()) as KubeInput;						_descriptionTxt	= _formCtn.addChild(new CssTextField("galleryFormLabel")) as CssTextField;			_description	= _formCtn.addChild(new KubeTextArea()) as KubeTextArea;			_stepperTxt		= _formCtn.addChild(new CssTextField("galleryFormLabel")) as CssTextField;			_steppers		= _formCtn.addChild(new KubeStepperHolder()) as KubeStepperHolder;			_submitBt		= _formCtn.addChild(new KubeButton(Label.getLabel("adsFormSubmit"))) as KubeButton;			_resultTxt		= _formCtn.addChild(new CssTextField()) as CssTextField;			_mask			= addChild(new Shape()) as Shape;			_spin			= addChild(new LoaderSpinning()) as LoaderSpinning;						_mask.graphics.beginFill(0xFFFFFF, 0);			_mask.graphics.drawRect(0, 0, 10, 10);			_formCtn.mask	= _mask;			_height			= _openCloseBar.height;						_title.textfield.maxChars = 50;			_description.textfield.maxChars = 5865;			_description.height = 57;			_resultTxt.wordWrap	= true;						_submitBt.contentMargin = new Margin(10, 4, 10, 4);			_titleTxt.text		= Label.getLabel("adsFormTitle");			_descriptionTxt.text= Label.getLabel("adsFormDescription");			_stepperTxt.text	= Label.getLabel("adsFormKubes");			_submitBt.style		= "buttonBig";			_submitBt.textAlign = TextAlign.CENTER;						_title.y			= Math.round(_titleTxt.y + _titleTxt.height);			_descriptionTxt.y	= Math.round(_title.y + _title.height + 10);			_description.y		= Math.round(_descriptionTxt.y + _descriptionTxt.height);			_stepperTxt.y		= Math.round(_description.y + _description.height + 10);			_steppers.y			= Math.round(_stepperTxt.y + _stepperTxt.height);						var i:int = 0;			_title.tabIndex			= i++;			_description.tabIndex	= i++;			_steppers.tabIndex		= i++;			_submitBt.tabIndex		= _steppers.tabIndexMax + 1;						addEventListener(FocusEvent.FOCUS_IN,				focusInHandler);			_openCloseBar.addEventListener(MouseEvent.CLICK,	clickBarHandler);			_submitBt.addEventListener(MouseEvent.CLICK,		submitHandler);			_title.addEventListener(FormComponentEvent.SUBMIT,	submitHandler);			_timerClear.addEventListener(TimerEvent.TIMER_COMPLETE,					timerClearCompleteHandler);			AdsData.getInstance().addEventListener(AdsDataEvent.ADD_AD_COMPLETE,	addAdResultHandler);			AdsData.getInstance().addEventListener(AdsDataEvent.ADD_AD_ERROR,		addAdResultHandler);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_openCloseBar.width	= _width;			_openCloseBar.validate();						_resultTxt.width	=			_steppers.width		=			_title.width		=			_description.width	= _width - 10;						_submitBt.x			= Math.round((_width - _submitBt.width) * .5);			_submitBt.y			= Math.round(_steppers.y + _steppers.height + 15);			_resultTxt.y		= Math.round(_submitBt.y + _submitBt.height + 4);						_formCtn.x			= 5;			_formCtn.y			= Math.round(_openCloseBar.y + _openCloseBar.height + 5);						_spin.x				= Math.round((_formCtn.width - _spin.width) * .5);			_spin.y				= Math.round((_formCtn.height - _spin.height) * .5);						_mask.width			= _width;			_mask.height		= _opened && !_tweening? _formCtn.y + _formCtn.height + 10 : _height;						graphics.clear();			graphics.beginFill(0xFFFFFF, .35);			graphics.drawRect(0, _openCloseBar.height, _width, _mask.height - _openCloseBar.height);		}				/**		 * Called when opening/closing tween completes.		 */		private function onTweenComplete():void {			_tweening = false;			if(!_opened && contains(_formCtn)) removeChild(_formCtn);		}
				/**		 * Called when open/close bar is clicked.		 */		private function clickBarHandler(event:MouseEvent):void {			if(_opened) { 				close();			} else {				open();			}
		}				/**		 * Called when the component receives the focus.		 */		private function focusInHandler(event:FocusEvent):void {			if(!_opened && _formCtn.contains(stage.focus as DisplayObject)) open();		}				/**		 * Called when submit button is clicked or when ENTER key is pressed on an input field.		 */		private function submitHandler(e:Event):void {			var isError:Boolean;			_titleTxt.style = "galleryFormLabel";			_stepperTxt.style = "galleryFormLabel";			if(!_submitBt.enabled) return;			if(_title.text.length == 0 || _title.text == _title.defaultLabel) {				_titleTxt.style = "galleryFormLabelError";				isError = true;			}			if(_steppers.formData.length == 0) {				_stepperTxt.style = "galleryFormLabelError";				isError = true;			}			if(!isError) {				AdsData.getInstance().saveAd(_title.text, _description.textfield.text, _steppers.formData);				_submitBt.enabled = false;				_spin.open();				_formCtn.mouseChildren = false;				TweenLite.to(_formCtn, .25, {alpha:.5});			}		}										//__________________________________________________________ SERVER RESULTS				/**		 * Called when ad registration completes.		 */		private function addAdResultHandler(event:AdsDataEvent):void {			if(event.resultCode == 0){				_resultTxt.style	= "galleryFormSuccess";				_resultTxt.text		= Label.getLabel("adsAddSuccess");			}else {				_resultTxt.style	= "galleryFormServerError";				_resultTxt.text		= Label.getLabel("adsAddServerError" + event.resultCode);			}			open();						_submitBt.enabled = true;			_spin.close();			_formCtn.mouseChildren = true;			TweenLite.to(_formCtn, .25, {alpha:1});			_timerClear.reset();			_timerClear.start();		}				/**		 * Called when clear timer completes to hide success or error message.		 */		private function timerClearCompleteHandler(event:TimerEvent = null):void {			if(event != null && !_opened) return;			_resultTxt.text	= "";			open();		}			}}