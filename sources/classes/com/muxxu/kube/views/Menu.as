package com.muxxu.kube.views {	import com.muxxu.kube.components.Separator;	import com.muxxu.kube.components.button.MenuButton;	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.vo.SeparatorType;	import com.muxxu.kube.vo.Templates;	import com.nurun.components.layout.VLayout;	import com.nurun.components.layout.core.ComputeType;	import com.nurun.components.layout.core.LayoutOffset;	import com.nurun.components.layout.core.list.LayoutItemOptions;	import com.nurun.structure.environnement.configuration.Config;	import com.nurun.structure.environnement.label.Label;	import com.nurun.structure.mvc.model.events.IModelEvent;	import com.nurun.structure.mvc.views.ViewLocator;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * Displays the main menu at the left of the application.	 * 	 * @author  Francois	 */	public class Menu extends AbstractKTView {				private var _ads:MenuButton;		private var _pois:MenuButton;		private var _generator:MenuButton;		private var _gallery:MenuButton;		private var _dolmens:MenuButton;		private var _options:MenuButton;		private var _separator:Separator;		private var _atlantiser:MenuButton;		private var _gps:MenuButton;		private var _workbench:MenuButton;		private var _menus:Vector.<MenuButton>;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Menu</code>.		 */		public function Menu() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */				public function get widthMax():Number {			computePositions();			return Math.max(_ads.width, _generator.width);		}				override public function get width():Number{ return super.width + _separator.width; }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called when model's state changes		 */		override public function update(event:IModelEvent):void {			event;//Avoid unsed warning from FDT			ViewLocator.getInstance().removeView(this);			alpha		= 1;			visible		= true;		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize():void {			super.initialize();			_menus		= new Vector.<MenuButton>();			i = 0;			_ads		= _menus[i++] = new MenuButton(Label.getLabel("ads"));			_gallery	= _menus[i++] = new MenuButton(Label.getLabel("gallery"));			_dolmens	= _menus[i++] = new MenuButton(Label.getLabel("dolmens"));			_gps		= _menus[i++] = new MenuButton(Label.getLabel("gps"));			_generator	= _menus[i++] = new MenuButton(Label.getLabel("generator"));			_workbench	= _menus[i++] = new MenuButton(Label.getLabel("workbench"));			_pois		= _menus[i++] = new MenuButton(Label.getLabel("pois"));						if(Config.getBooleanVariable("isEtnalta")) {				_atlantiser	= _menus[i++] = new MenuButton("Atlantiser");			}else if(Config.getBooleanVariable("isKm")) {				_atlantiser	= _menus[i++] = new MenuButton("Babyloniser");			}			_options	= _menus[i++] = new MenuButton(Label.getLabel("options"));			_separator	= addChildOutsidePane(new Separator(SeparatorType.VERTICAL)) as Separator;						var i:int, len:int;
			len = _menus.length;
			for(i = 0; i < len; ++i) {
				addChild(_menus[i]);
			}						_ads.enabled = false;			_pois.enabled = false;			_options.enabled = false;						addEventListener(MouseEvent.CLICK, clickHandler);		}		/**		 * Resize and replace the elements.		 */		override protected function computePositions(e:Event = null):void {			var i:int, len:int, wMax:int, py:int;			len = _menus.length;			for(i = 0; i < len; ++i) {				_menus[i].width = 0;				wMax = Math.max(wMax, _menus[i].width + 10);			}			wMax += 5;			for(i = 0; i < len; ++i) {				_menus[i].width = wMax;				_menus[i].y = py;				py += _menus[i].height + 5;			}						_options.y += 20;						_separator.height	= _height;			_separator.width	= Background.CELL_WIDTH;			_separator.x		= _width;						graphics.clear();			graphics.beginFill(0xffffff, .5);			graphics.drawRect(0, 0, _width, _height);						super.computePositions();		}										//__________________________________________________________ MOUSE EVENTS				/**		 * Called when a click is done over the menu.		 */		private function clickHandler(e:MouseEvent):void {			if(e.target is MenuButton){				var target:MenuButton = e.target as MenuButton;				switch(target){					case _pois:						FrontControler.getInstance().viewId = Templates.POIS;						break;					case _dolmens:						FrontControler.getInstance().viewId = Templates.DOLMENS;						break;					case _gallery:						FrontControler.getInstance().viewId = Templates.GALLERY;						break;					case _generator:						FrontControler.getInstance().viewId = Templates.GENERATOR;						break;					case _ads:						FrontControler.getInstance().viewId = Templates.ADS;						break;					case _options:						FrontControler.getInstance().viewId = Templates.OPTIONS;						break;					case _atlantiser:						FrontControler.getInstance().viewId = Templates.ATLANTISER;						break;					case _gps:						FrontControler.getInstance().viewId = Templates.GPS;						break;					case _workbench:						FrontControler.getInstance().viewId = Templates.WORKBENCH;						break;				}			}		}	}}