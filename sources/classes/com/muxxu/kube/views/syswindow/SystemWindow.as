package com.muxxu.kube.views.syswindow {	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.graphics.window.CloseIcon;	import com.muxxu.kube.views.Background;	import com.nurun.components.button.AbstractNurunButton;	import com.nurun.components.button.IconAlign;	import com.nurun.components.form.IFormComponent;	import com.nurun.components.invalidator.Validable;	import com.nurun.core.lang.Disposable;	import flash.display.DisplayObject;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	import flash.display.Screen;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NativeWindowBoundsEvent;	import flash.geom.Rectangle;	/**	 * 	 * @author Francois	 */	public class SystemWindow extends Sprite {				private var _window:NativeWindow;		private var _contentHolder:Sprite;		private var _currentContent:DisplayObject;		private var _closeBt:KubeButton;		private var _background:Background;		private var _ignoreMoving:Boolean;		private var _soPosParam:String;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SystemWindow</code>.		 */		public function SystemWindow() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens a content to the window.		 * 		 * @param content		content to open		 * @param soPosParam	SharedObject position param. The property name of the SharedObjectManager that contains the window's position.		 */		public function open(content:DisplayObject, soPosParam:String = null):void {			_soPosParam = soPosParam;			if(content != _currentContent){				close();				_currentContent = content;				content.addEventListener(Event.RESIZE, computePositions);							if(_soPosParam != null) {					var pos:Object	= SharedObjectManager.getInstance()[_soPosParam];					_window.x		= pos.x;					_window.y		= pos.y;				}			}			if(content is Validable) Validable(content).validate();						_contentHolder.addChild(content);						_window.visible = true;						computePositions();		}		/**		 * Closes the window.		 */		public function close():void {			if(_currentContent != null) {				if(_currentContent is Disposable) Disposable(_currentContent).dispose();				_contentHolder.removeChild(_currentContent);				_currentContent.removeEventListener(Event.RESIZE, computePositions);				_currentContent = null;			}			_window.visible = false;		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			var options:NativeWindowInitOptions = new NativeWindowInitOptions();			options.maximizable		= false;			options.minimizable		= false;			options.resizable		= false;			options.systemChrome	= NativeWindowSystemChrome.NONE;			options.transparent		= true;			options.type			= NativeWindowType.LIGHTWEIGHT;						_window					= new NativeWindow(options);			_window.stage.scaleMode	= StageScaleMode.NO_SCALE;			_window.stage.align		= StageAlign.TOP_LEFT;			_window.alwaysInFront	= true;						_contentHolder			= new Sprite();			_background				= _contentHolder.addChild(new Background()) as Background;			_closeBt				= _contentHolder.addChild(new KubeButton("", new CloseIcon())) as KubeButton;						_closeBt.iconAlign		= IconAlign.CENTER;			_closeBt.width			= _closeBt.height = 16;			_window.stage.addChild(_contentHolder);						_closeBt.addEventListener(MouseEvent.CLICK, clickCloseHandler);			_contentHolder.addEventListener(MouseEvent.MOUSE_DOWN, clickWindowHandler);			_window.addEventListener(NativeWindowBoundsEvent.MOVE, moveWindowHandler);			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}		/**		 * REsizes/replaces the elments		 */		private function computePositions(event:Event = null):void {			var screen:Screen= Screen.getScreensForRectangle(new Rectangle(stage.nativeWindow.x, stage.nativeWindow.y, 1, 1))[0] as Screen;			if(screen == null) screen = Screen.screens[0];						_window.width	= Math.max(_closeBt.width, Math.round(_currentContent.width)) + Background.CELL_WIDTH * 2 + _closeBt.width * 2;			_window.height	= Math.max(_closeBt.height, Math.round(_currentContent.height)) + Background.CELL_WIDTH * 2 + _closeBt.width * 2;						var pos:Object;			if(_soPosParam != null) {				pos	= SharedObjectManager.getInstance()[_soPosParam];			}			_ignoreMoving = true;			if(pos == null || pos.x == int.MAX_VALUE || pos.y == int.MAX_VALUE) {				_window.x	= screen.visibleBounds.right - _window.width - 2;				_window.y	= screen.visibleBounds.bottom - _window.height - 2;			}			_ignoreMoving = false;						_currentContent.x	= Background.CELL_WIDTH + _closeBt.width;			_currentContent.y	= Background.CELL_WIDTH + _closeBt.height;			_closeBt.y		= Background.CELL_WIDTH + 2;			_closeBt.x		= _window.width - _closeBt.width - Background.CELL_WIDTH;			_background.width = _window.width;			_background.height = _window.height;		}				/**		 * Called when the stage is available.		 */		private function addedToStageHandler(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			stage.nativeWindow.addEventListener(Event.CLOSE, closeApplicationHandler);		}				/**		 * Called when the application is closed.		 */		private function closeApplicationHandler(event:Event):void {			_window.close();		}				/**		 * Called when the window moves.		 */		private function moveWindowHandler(event:NativeWindowBoundsEvent):void {			if(_ignoreMoving || _soPosParam == null) return;			var pos:Object = {x:_window.x, y:_window.y};			SharedObjectManager.getInstance()[_soPosParam] = pos;		}		/**		 * Called when the user starts to move the window.		 */		private function clickWindowHandler(event:MouseEvent):void {			if(event.target is AbstractNurunButton || event.target is IFormComponent) return;			_window.startMove();		}		/**		 * Called when the close button is clicked.		 */		private function clickCloseHandler(event:MouseEvent):void {			close();		}			}}