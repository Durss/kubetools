package com.muxxu.kube.views.syswindow {	import flash.display.Sprite;	import flash.errors.IllegalOperationError;	import flash.events.Event;	/**	 * Singleton SystemWindowManager	 * 	 * @author Francois	 */	public class SystemWindowManager extends Sprite {				private static var _instance:SystemWindowManager;
		private var _windows:Vector.<SystemWindow>;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SystemWindowManager</code>.		 */		public function SystemWindowManager(enforcer:SingletonEnforcer) {			if(enforcer == null) {				throw new IllegalOperationError("A singleton can't be instanciated. Use static accessor 'getInstance()'!");			}			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter.		 */		public static function getInstance():SystemWindowManager {			if(_instance == null)_instance = new  SystemWindowManager(new SingletonEnforcer());			return _instance;			}		/* ****** *		 * PUBLIC *		 * ****** */		public function create():SystemWindow {			var window:SystemWindow = addChild(new SystemWindow()) as SystemWindow;			_windows.push(window);			return window;		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_windows = new Vector.<SystemWindow>();			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}
				/**		 * Called when the stage is available.		 */		private function addedToStageHandler(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			stage.nativeWindow.addEventListener(Event.CLOSE, closeApplicationHandler);		}				/**		 * Called when the application is closed.		 */		private function closeApplicationHandler(event:Event):void {			var i:int, len:int;			len = _windows.length;			for(i = 0; i < len; ++i) {				_windows[i].close();			}		}
	}}internal class SingletonEnforcer{}