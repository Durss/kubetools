package com.muxxu.kube.views.gps.components {	import gs.TweenLite;	import com.muxxu.kube.components.KubeScrollbar;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.data.GPSData;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.events.GPSDataEvent;	import com.muxxu.kube.graphics.window.CloseIcon;	import com.muxxu.kube.views.Background;	import com.muxxu.kube.vo.KPPEntry;	import com.nurun.components.button.IconAlign;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableDisplayObject;	import com.nurun.components.text.CssTextField;	import com.nurun.core.lang.Disposable;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	/**	 * 	 * @author Francois	 */	public class GPSKPPList extends Sprite {				private static const _WIDTH:int = 500;
		private static const _HEIGHT:int = 300;				private var _width:Number = 100;		private var _height:Number = 100;
		private var _background:Background;
		private var _scrollable:ScrollableDisplayObject;
		private var _scrollpane:ScrollPane;
		private var _freezeLayer:Sprite;
		private var _container:Sprite;
		private var _title:CssTextField;
		private var _closeBt:KubeButton;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>KPPList</code>.		 */		public function GPSKPPList() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the height of the component without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}
						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the view		 */		public function open(...args:Array):void {			updateList();			TweenLite.to(this, .5, {autoAlpha:1});
		}
				/**		 * Closes the view		 */		public function close(...args:Array):void {			TweenLite.to(this, .5, {autoAlpha:0});
		}
										/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			visible = false;			alpha = 0;						_freezeLayer = addChild(new Sprite()) as Sprite;			_container = addChild(new Sprite()) as Sprite;			_background = _container.addChild(new Background()) as Background;			_closeBt = _container.addChild(new KubeButton("", new CloseIcon())) as KubeButton;			_title = _container.addChild(new CssTextField("gpsKPPWindowTitle")) as CssTextField;			_scrollable = new ScrollableDisplayObject();			_scrollpane = _container.addChild(new ScrollPane(_scrollable, new KubeScrollbar())) as ScrollPane;						_title.text = Label.getLabel("gpsKppListTitle");			_closeBt.iconAlign = IconAlign.CENTER;			_closeBt.width = _closeBt.height = 16;						GPSData.getInstance().addEventListener(GPSDataEvent.UPLOAD_KPP_COMPLETE, uploadKPPCompleteHandler);			GPSData.getInstance().addEventListener(GPSDataEvent.UPLOAD_KPP_ERROR, uploadKPPErrorHandler);			GPSData.getInstance().addEventListener(GPSDataEvent.SHOW_KPP_lIST, open);						_freezeLayer.addEventListener(MouseEvent.CLICK, close);			_closeBt.addEventListener(MouseEvent.CLICK, close);						computePositions();		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var margins:int = Background.CELL_WIDTH * 2;						_background.width = _WIDTH;			_background.height = _HEIGHT;			_background.scrollRect = new Rectangle(0, 0, _WIDTH - 1, _HEIGHT - 1);						_title.x = margins;			_title.y = margins;						_closeBt.x = _WIDTH - margins - _closeBt.width;			_closeBt.y = margins;						_scrollpane.x = margins;			_scrollpane.y = Math.round(margins + _title.height + 5);			_scrollpane.width = _WIDTH - margins * 2;			_scrollpane.height = Math.round(_HEIGHT - margins - _scrollpane.y);						_freezeLayer.graphics.clear();			_freezeLayer.graphics.beginFill(0, .2);			_freezeLayer.graphics.drawRect(0, 0, _width, _height);			_freezeLayer.graphics.endFill();						_container.x = Math.round((_width - _WIDTH) * .5);			_container.y = Math.round((_height - _HEIGHT) * .5);		}		/**		 * Updates the KPPs list		 */		private function updateList():void {			var kpps:Vector.<KPPEntry> = SharedObjectManager.getInstance().getKpps();			var i:int, len:int, py:int, item:GPSKPPListItem;			len = kpps.length;						while(_scrollable.content.numChildren > 0) {				if(_scrollable.content.getChildAt(0) is Disposable) Disposable(_scrollable.content.getChildAt(0)).dispose();				_scrollable.content.removeChildAt(0);			}						for(i = 0; i < len; ++i) {				item = _scrollable.content.addChild(new GPSKPPListItem(kpps[i], (i%2==0)? 0xff69B9DA : 0xff3199C6)) as GPSKPPListItem;				item.width = _scrollpane.width;				item.y = py;				py += item.height;			}			_scrollpane.validate();		}								//__________________________________________________________ LOAD EVENTS				/**		 * Called when KPP upload completes.		 */		private function uploadKPPCompleteHandler(event:GPSDataEvent):void {			if(event.kppID != null && event.kppID.length > 0) {				SharedObjectManager.getInstance().addKpp(event.kppID);			}			open();		}
		/**		 * Called if KPP upload fails.		 */		private function uploadKPPErrorHandler(event:GPSDataEvent):void {			open();		}			}}