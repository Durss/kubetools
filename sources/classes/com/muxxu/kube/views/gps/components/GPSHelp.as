package com.muxxu.kube.views.gps.components {	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.data.SharedObjectManager;	import com.nurun.components.text.CssTextField;	import com.nurun.components.vo.Margin;	import com.nurun.structure.environnement.label.Label;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.text.TextFieldAutoSize;	/**	 * Displays the help.	 * 	 * @author  Francois	 */	public class GPSHelp extends Sprite {				[Embed(source="../../../../../../../../deploy/imgs/help/trustpath.png")]		private var _trustPathImgAsset:Class;		[Embed(source="../../../../../../../../deploy/imgs/help/profiler.png")]		private var _profilerImgAsset:Class;				private var _textfield:CssTextField;		private var _height:Number;		private var _width:Number;		private var _continueBt:KubeButton;		private var _trustPathImg:Bitmap;
		private var _ctn:Sprite;
		private var _step:int;
		private var _profilerImg:Bitmap;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Help</code>.		 */		public function GPSHelp() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's height.		 */		override public function get height():Number { return _height; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Resets the help.		 */		public function reset():void {			_step = 0;			_continueBt.label = Label.getLabel("gpsHelpNext");			clickContinueHandler();		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			_step = 0;			_ctn = addChild(new Sprite()) as Sprite;			_textfield = _ctn.addChild(new CssTextField("content")) as CssTextField;			_continueBt = _ctn.addChild(new KubeButton(Label.getLabel("gpsHelpNext"))) as KubeButton;			_textfield.autoSize = TextFieldAutoSize.LEFT;			_textfield.wordWrap = true;			_width = _height = 200;						_trustPathImg = _ctn.addChild(new _trustPathImgAsset()) as Bitmap;			_profilerImg = _ctn.addChild(new _profilerImgAsset()) as Bitmap;						_continueBt.style = "buttonBig";			_continueBt.contentMargin = new Margin(10, 5, 10, 5);						_continueBt.addEventListener(MouseEvent.CLICK, clickContinueHandler);			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}		private function addedToStageHandler(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			clickContinueHandler();
		}
		/**		 * Called when the continue button is clicked		 */		private function clickContinueHandler(event:MouseEvent = null):void {			_step++;			_trustPathImg.visible = _step == 1;			_profilerImg.visible =_step == 3;			if(_step < 4) {				var txt:String = Label.getLabel("gpsHelp"+_step);				txt = txt.replace(/\{MMCFG_URL\}/gi, File.userDirectory.resolvePath("mm.cfg").nativePath);				_textfield.text = txt;				if(_step == 3) {					_continueBt.label = Label.getLabel("gpsHelpEnd");				}				computePositions();			}else{				SharedObjectManager.getInstance().gpsHelpRead = true;				dispatchEvent(new Event(Event.COMPLETE));			}		}		/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_textfield.width = Math.min(_width, 600);						_textfield.x = Math.round((_width - _textfield.width) * .5);						_trustPathImg.x = Math.round((_width - _trustPathImg.width) * .5);			_trustPathImg.y = Math.round(_textfield.y + _textfield.height + 15);						_profilerImg.x = Math.round((_width - _profilerImg.width) * .5);			_profilerImg.y = Math.round(_textfield.y + _textfield.height + 15);						_continueBt.x = Math.round((_width - _continueBt.width) * .5);			if(_trustPathImg.visible) {				_continueBt.y = Math.round(_trustPathImg.y + _trustPathImg.height + 15);			}else if(_profilerImg.visible) {				_continueBt.y = Math.round(_profilerImg.y + _profilerImg.height + 15);			}else {				_continueBt.y = Math.round(_textfield.y + _textfield.height + 15);			}						_ctn.y = Math.round((stage.stageHeight - (_continueBt.y + _continueBt.height)) * .5);		}
	}}