package com.muxxu.kube.views.gps.components {	import flash.net.URLRequest;
	import flash.net.navigateToURL;
	import gs.TweenLite;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.button.KubeToggleButton;	import com.muxxu.kube.components.button.OpenCloseFormButton;	import com.muxxu.kube.components.tooltip.ToolTip;	import com.muxxu.kube.components.tooltip.content.TTTextContent;	import com.muxxu.kube.data.GPSData;	import com.muxxu.kube.events.GPSDataEvent;	import com.muxxu.kube.graphics.ClearIcon;	import com.muxxu.kube.graphics.LoadIcon;	import com.muxxu.kube.graphics.PencilIcon;	import com.muxxu.kube.graphics.RegisterMoving;	import com.muxxu.kube.graphics.RubberIcon;	import com.muxxu.kube.graphics.SaveIcon;	import com.muxxu.kube.graphics.StopRegisterMoving;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.components.form.FormComponentGroup;	import com.nurun.components.form.events.FormComponentGroupEvent;	import com.nurun.components.layout.HLayout;	import com.nurun.components.layout.VLayout;	import com.nurun.structure.environnement.label.Label;	import com.nurun.utils.input.keyboard.KeyboardSequenceDetector;	import com.nurun.utils.input.keyboard.events.KeyboardSequenceEvent;	import flash.display.InteractiveObject;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	/**	 * 	 * @author  Francois	 */	public class GPSForm extends Sprite {				private var _width:Number;		private var _height:Number;		private var _openCloseBar:OpenCloseFormButton;		private var _loadButton:KubeButton;		private var _mask:Shape;		private var _opened:Boolean;		private var _register:KubeToggleButton;		private var _updateMmCfg:KubeButton;		private var _toolTip:ToolTip;		private var _message:ToolTipMessage;		private var _ttContent:TTTextContent;		private var _eraseMode:KubeToggleButton;		private var _layout:VLayout;		private var _savePath:KubeButton;		private var _ks:KeyboardSequenceDetector;		private var _addInfos:KubeToggleButton;		private var _group:FormComponentGroup;		private var _gps:KubeToggleButton;		private var _clear:KubeButton;
		private var _uploadPath:KubeButton;
		private var _downloadKPP:DownloadKPP;
		private var _myKPPs:KubeButton;
		private var _downloadScript:KubeToggleButton;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GPSForm</code>.		 */		public function GPSForm() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's height.		 */		override public function get height():Number { return _mask.height; }				/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}		public function enable():void {					}		public function disable():void {					}				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the form.		 */		public function open():void {			_opened = true;			TweenLite.to(this, .5, {height:_layout.y + _layout.height, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)]});		}				/**		 * Closes the form.		 */		public function close():void {			_opened = false;			TweenLite.to(this, .5, {height:_openCloseBar.height, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)]});		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			_openCloseBar	= addChild(new OpenCloseFormButton(Label.getLabel("gpsFormOpener"))) as OpenCloseFormButton;			_layout			= addChild(new VLayout("left", 15)) as VLayout;			var layout2:HLayout = _layout.addItem(new HLayout("left", 15)) as HLayout;			var layout3:HLayout = _layout.addItem(new HLayout("left", 15)) as HLayout;			var layout1:HLayout = _layout.addItem(new HLayout("left", 15)) as HLayout;			var layout4:HLayout = _layout.addItem(new HLayout("left", 15)) as HLayout;			_loadButton		= layout1.addItem(new KubeButton(Label.getLabel("gpsFormLoadPath"), new LoadIcon())) as KubeButton;			_savePath		= layout1.addItem(new KubeButton(Label.getLabel("gpsFormSavePath"), new SaveIcon())) as KubeButton;			_uploadPath		= layout1.addItem(new KubeButton(Label.getLabel("gpsFormUploadPath"), new SaveIcon())) as KubeButton;			_myKPPs			= layout1.addItem(new KubeButton(Label.getLabel("gpsFormMyKPPs"), new SaveIcon())) as KubeButton;			_addInfos		= layout2.addItem(new KubeToggleButton(Label.getLabel("gpsFormAddInfos"), new PencilIcon(), null)) as KubeToggleButton;			_eraseMode		= layout2.addItem(new KubeToggleButton(Label.getLabel("gpsFormErase"), new RubberIcon(), null)) as KubeToggleButton;			_clear			= layout2.addItem(new KubeButton(Label.getLabel("gpsFormClear"), new ClearIcon())) as KubeButton;			_register		= layout3.addItem(new KubeToggleButton(Label.getLabel("gpsFormRegister"), new RegisterMoving(), new StopRegisterMoving())) as KubeToggleButton;			_gps			= layout3.addItem(new KubeToggleButton(Label.getLabel("gpsFormStartGPS"), new RegisterMoving(), new StopRegisterMoving())) as KubeToggleButton;			_downloadScript	= layout3.addItem(new KubeToggleButton("GreaseMonkey script")) as KubeToggleButton;			_downloadKPP	= layout4.addItem(new DownloadKPP()) as DownloadKPP;			_updateMmCfg	= new KubeButton("");			_toolTip		= addChild(new ToolTip()) as ToolTip;			_mask			= addChild(new Shape()) as Shape;						_gps.enabled		= false;			_savePath.enabled	= false;			_uploadPath.enabled	= false;						_ttContent = new TTTextContent();			_message = new ToolTipMessage(_ttContent, null);						_group = new FormComponentGroup();			_group.add(_eraseMode);			_group.add(_addInfos);			_group.allowNoSelection = true;						var i:int = 3;			_addInfos.tabIndex		= i++;			_eraseMode.tabIndex		= i++;			_clear.tabIndex			= i++;						_register.tabIndex		= i++;			_gps.tabIndex			= i++;			_downloadScript.tabIndex= i++;						_loadButton.tabIndex	= i++;			_savePath.tabIndex		= i++;			_uploadPath.tabIndex	= i++;			_myKPPs.tabIndex		= i++;			_downloadKPP.tabIndex	= i++;						_gps.height			= 			_clear.height		= 			_loadButton.height	= 			_eraseMode.height	= 			_addInfos.height	=			_savePath.height	= 			_downloadScript.height	= 			_updateMmCfg.height	= _register.height;			_updateMmCfg.label	= GPSData.getInstance().mmcfgEnabled? "Profiler is ON" : "Profiler is OFF";						_mask.graphics.beginFill(0xFFFFFF, 1);			_mask.graphics.drawRect(0, 0, 10, 10);			_layout.mask = _mask;			_layout.validate();						_width		= 300;			_height		= Math.round(_openCloseBar.y + _openCloseBar.height + 8 + _layout.y + _layout.height);			_opened		= true;						_group.addEventListener(FormComponentGroupEvent.CHANGE, clickButtonHandler); 			_gps.addEventListener(Event.CHANGE,					clickButtonHandler);			_register.addEventListener(Event.CHANGE,			clickButtonHandler);			_openCloseBar.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_loadButton.addEventListener(MouseEvent.CLICK,		clickButtonHandler);			_updateMmCfg.addEventListener(MouseEvent.CLICK,		clickButtonHandler);			_savePath.addEventListener(MouseEvent.CLICK,		clickButtonHandler);			_uploadPath.addEventListener(MouseEvent.CLICK,		clickButtonHandler);			_myKPPs.addEventListener(MouseEvent.CLICK,			clickButtonHandler);			_clear.addEventListener(MouseEvent.CLICK,			clickButtonHandler);			_downloadScript.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_register.addEventListener(MouseEvent.ROLL_OVER,	rollOverButtonHandler);			_gps.addEventListener(MouseEvent.ROLL_OVER,			rollOverButtonHandler);			addEventListener(Event.ADDED_TO_STAGE,				addedToStageHandler);			addEventListener(FocusEvent.FOCUS_IN,				focusInHandler);			GPSData.getInstance().addEventListener(GPSDataEvent.DATA_CHANGES, dataChangeHandler);		}				/**		 * Called when the component receives the focus.		 */		private function focusInHandler(event:FocusEvent):void {			if(!_opened) open();		}
		/**		 * Called when the stage is available.		 */		private function addedToStageHandler(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);						_ks = new KeyboardSequenceDetector(stage);			_ks.addSequence("mmcfg", [27, 77, 77, 67, 70, 71, 13]); //ESC + MMCFG + Enter			_ks.addSequence("escape", [27]); //ESC			_ks.addEventListener(KeyboardSequenceEvent.SEQUENCE, keyboardSequenceHandler);		}				/**		 * Called when stage is clicked.		 * Dirty way to unselect the add infos button instead of fireing an		 * event through the model from the grid to the form to tell that an info		 * has been added.		 */		private function clickStageHandler(event:MouseEvent):void {			_addInfos.unSelect();			_layout.validate();			computePositions();			stage.removeEventListener(MouseEvent.MOUSE_UP, clickStageHandler);		}				/**		 * Called when a keyboard sequence is detected.		 */		private function keyboardSequenceHandler(event:KeyboardSequenceEvent):void {			if(event.sequenceId == "escape") {				_addInfos.unSelect();				_eraseMode.unSelect();				GPSData.getInstance().setAddInfoMode(false);				GPSData.getInstance().setEraseMode(false);				if(stage != null) stage.removeEventListener(MouseEvent.MOUSE_UP, clickStageHandler);			}else{				if(_layout.contains(_updateMmCfg)) {					_layout.removeItem(_updateMmCfg);				}else{					_layout.addItem(_updateMmCfg);				}			}			_layout.validate();			_height		= Math.round(_layout.y + _layout.height);			computePositions();			dispatchEvent(new Event(Event.RESIZE));		}		/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_openCloseBar.width	= _width;			_openCloseBar.validate();			_mask.width		= _width;			_mask.height	= _height + 5;						_layout.x		= 5;			_layout.y		= Math.round(_openCloseBar.y + _openCloseBar.height + 5);						_toolTip.x = Math.round((_width - _toolTip.width) * .5);			_toolTip.y = -_toolTip.height + 0;						graphics.clear();			graphics.beginFill(0xFFFFFF, .35);			graphics.drawRect(0, _openCloseBar.height, _width, _height + 5 - _openCloseBar.height);		}								//__________________________________________________________ MODEL EVENTS				/**		 * Called when new data are available.		 */		private function dataChangeHandler(event:GPSDataEvent):void {			_gps.unSelect();			_gps.label = Label.getLabel("gpsFormStartGPS");			_savePath.enabled =			_uploadPath.enabled = 			_gps.enabled = GPSData.getInstance().canSynchGame;		}						//__________________________________________________________ MOUSE EVENTS				/**		 * Called when submit button is clicked or when ENTER key is pressed on an input field.		 */		private function clickButtonHandler(e:Event):void {			var target:Object = e.currentTarget as Object;			if(target == _openCloseBar){				if(_opened){ close(); }else{ open(); }							} else if(target == _register) {				if(_register.selected) {					_register.label = Label.getLabel("gpsFormStopRegister");					GPSData.getInstance().startCapture();				} else{					_register.label = Label.getLabel("gpsFormRegister");					GPSData.getInstance().stopCapture();				}							} else if(target == _gps) {				if(_gps.selected) {					_gps.label = Label.getLabel("gpsFormStopGPS");					_register.unSelect();					_register.label = Label.getLabel("gpsFormRegister");					GPSData.getInstance().startGPS();				} else{					_gps.label = Label.getLabel("gpsFormStartGPS");					GPSData.getInstance().stopGPS();				}							} else if(target == _loadButton) {				GPSData.getInstance().loadPath();							} else if(target == _updateMmCfg) {				var enabled:Boolean = GPSData.getInstance().mmcfgEnabled;				_updateMmCfg.label = !enabled ? "Profiler is ON" : "Profiler is OFF";				GPSData.getInstance().updateMmCfg(!enabled);							} else if(target == _savePath) {				GPSData.getInstance().save();							} else if(target == _uploadPath) {				GPSData.getInstance().uploadKPP();							} else if(target == _myKPPs) {				GPSData.getInstance().showKPPs();							} else if(target == _group) {				GPSData.getInstance().setAddInfoMode(_addInfos.selected);				if(_addInfos.selected) {					stage.addEventListener(MouseEvent.MOUSE_UP, clickStageHandler);				}				GPSData.getInstance().setEraseMode(_eraseMode.selected);							} else if(target == _clear) {				GPSData.getInstance().clear();							} else if(target == _downloadScript) {				navigateToURL(new URLRequest("http://www.muxxu.free.fr/kube/apps/kubetools/kubeKTBridge.user.js"));			}						_layout.validate();		}				/**		 * Called when a button is rolled over.		 */		private function rollOverButtonHandler(event:MouseEvent):void {			var label:String;			if(event.currentTarget == _gps) {				label = Label.getLabel("gpsFormToolTipSynch");			}else{				label = Label.getLabel("gpsFormToolTipCapture");			}						TweenLite.killDelayedCallsTo(_toolTip.close);			_ttContent.populate(label);			_message.target = event.currentTarget as InteractiveObject;			_toolTip.open(_message);			computePositions();		}
	}}