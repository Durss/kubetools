package com.muxxu.kube.views.gps.components {	import com.muxxu.kube.utils.ColorFunctions;	import com.muxxu.kube.vo.KPPEntry;	import com.nurun.components.text.CssTextField;	import com.nurun.utils.date.DateUtils;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.system.System;	/**	 * 	 * @author Francois	 */	public class GPSKPPListItem extends Sprite {		private var _data:KPPEntry;		private var _label:CssTextField;		private var _bgColor:uint;
		private var _width:Number;
		private var _date:CssTextField;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GPSKPPListItem</code>.		 */		public function GPSKPPListItem(data:KPPEntry, bgColor:uint) {			_bgColor = bgColor;			_data = data;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			drawBack(_bgColor);		}						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_label	= addChild(new CssTextField("gpsKPPId")) as CssTextField;			_date	= addChild(new CssTextField("gpsKPPDate")) as CssTextField;			var date:Date = new Date();			date.setTime(_data.time);			_label.text	= _data.id;			_date.text	= " le "+DateUtils.format(date, "_W_/_n_/_Y_ Ã  _h_:_i_");						_label.selectable = true;			_date.mouseEnabled = false;			buttonMode = true;						_date.x = Math.max(_label.width, 230);						addEventListener(MouseEvent.CLICK, clickHandler);			addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);			addEventListener(MouseEvent.ROLL_OUT, rollOutHandler);		}
		/**		 * Called when the component is clicked.		 */		private function clickHandler(event:MouseEvent):void {			System.setClipboard(_data.id);
		}
		/**		 * Resize and replace the elements.		 */		private function drawBack(color:uint):void {			graphics.clear();			graphics.beginFill(color & 0xffffff, (color >> 24 & 0xff) / 255);			graphics.drawRect(0, 0, _width, _label.height);			graphics.endFill();		}				/**		 * Called when the component is rolled over.		 */		private function rollOverHandler(event:MouseEvent):void {			var alphaChannel:uint = _bgColor & 0xff000000;			drawBack(ColorFunctions.setRGBBrightness(_bgColor & 0xffffff, 180) | alphaChannel);		}		/**		 * Called when the component is rolled out.		 */		private function rollOutHandler(event:MouseEvent):void {			drawBack(_bgColor);		}			}}