package com.muxxu.kube.views.dolmens.components {	import flash.events.MouseEvent;
	import com.nurun.components.button.IconAlign;
	import flash.events.Event;
	import com.nurun.components.form.GroupableFormComponent;
	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.button.KubeToggleButton;	import com.muxxu.kube.components.form.KubeCheckBox;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.graphics.ClearIcon;	import com.muxxu.kube.graphics.LockedGraphic;	import com.muxxu.kube.graphics.UnlockedGraphic;	import com.nurun.core.lang.Disposable;	import flash.display.Sprite;	import flash.geom.Point;	/**	 * 	 * @author Francois	 */	public class AddDolmenEntry extends Sprite implements Disposable, GroupableFormComponent {		private var _checkbox:KubeCheckBox;
		private var _delBt:KubeButton;
		private var _hide:KubeToggleButton;		private var _pos:Point;
										/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AddDolmenEntry</code>.		 */		public function AddDolmenEntry(pos:Point) {			_pos = pos;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets if the dolmen should be registered.		 */		public function get selected():Boolean { return _checkbox.selected; }				/**		 * Sets the selected state of the component.		 */		public function set selected(value:Boolean):void {			_checkbox.selected = value;			dispatchEvent(new Event(Event.CHANGE));		}		/**		 * Gets if the dolmen should be hidden.		 */		public function get hidden():Boolean { return (_hide != null)? _hide.selected : false; }				/**		 * Gets the dolmen's position.		 */		public function get pos():Point { return _pos; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			while(numChildren > 0) {				if(getChildAt(0) is Disposable) Disposable(getChildAt(0)).dispose();				removeChildAt(0);			}		}				/**		 * @inheritDoc		 */		public function select():void {			_checkbox.selected = true;		}				/**		 * @inheritDoc		 */		public function unSelect():void {			_checkbox.selected = false;		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_checkbox	= addChild(new KubeCheckBox("["+_pos.x+"]["+_pos.y+"]")) as KubeCheckBox;			_delBt		= addChild(new KubeButton("", new ClearIcon())) as KubeButton;			_delBt.iconAlign = IconAlign.CENTER;			if(SharedObjectManager.getInstance().isEtnalta) {				_hide = addChild(new KubeToggleButton("", new UnlockedGraphic(), new LockedGraphic())) as KubeToggleButton;				_hide.iconAlign = IconAlign.CENTER;				_hide.selected = true;				_delBt.height = _hide.height;				_delBt.width = _hide.width = _hide.height;			}else{				_delBt.height = _delBt.width = _checkbox.icon.height;			}			_checkbox.yLabelOffset = -2;			computePositions();						_delBt.addEventListener(MouseEvent.CLICK, clickDeleteHandler);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_checkbox.width = 120;			_delBt.x = Math.round(_checkbox.width + 10);			if(_hide != null) {				_hide.x = Math.round(_delBt.x + _delBt.width + 5);			}		}				/**		 * Called when delete button is clicked		 */		private function clickDeleteHandler(event:MouseEvent):void {			dispatchEvent(new Event(Event.CLOSE));		}	}}