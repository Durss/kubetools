package com.muxxu.kube.views.dolmens {		import com.muxxu.kube.components.map.icons.MapIconDolmenZone;
	import com.muxxu.kube.components.map.MapEngine;	import com.muxxu.kube.components.map.MapEngineEvent;	import com.muxxu.kube.components.map.MapEntry;	import com.muxxu.kube.components.tooltip.ToolTip;	import com.muxxu.kube.components.tooltip.content.TTTextContent;	import com.muxxu.kube.data.DolmenData;	import com.muxxu.kube.events.DolmenMapDataEvent;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.geom.Point;	import flash.utils.setTimeout;	/**	 * Displays the dolmens	 * 	 * @author  Francois	 */	public class DolmenMap extends Sprite {				private var _map:MapEngine;		private var _width:int;
		private var _height:int;
		private var _tooltip:ToolTip;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>DolmenMap</code>.		 */		public function DolmenMap() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's height.		 */		override public function get height():Number { return _height; }
						/* ****** *		 * PUBLIC *		 * ****** */				/**		 * Enables rendering		 */		public function enable():void {			_map.enable(true);		}		/**		 * Disables rendering		 */		public function disable():void {			_map.disable();		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			_map = addChild(new MapEngine()) as MapEngine;			_map.disable();			_tooltip = addChild(new ToolTip()) as ToolTip;						_map.addEventListener(MapEngineEvent.DATA_NEEDED, mapRequestDataHandler);
			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.UPDATE_MAP, updateMapHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.ADD_DOLMEN_COMPLETE, addDolmenCompleteHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.LOAD_DOLMENS_ERROR, loadDolmensErrorHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.LOAD_DOLMENS_COMPLETE, loadDolmensCompleteHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.CENTER_MAP_ON, centerMapHandler);		}
				/**		 * Centers the map on a specific point.		 */		private function centerMapHandler(event:DolmenMapDataEvent):void {			_map.centerOn(new Point(event.area.x, event.area.y));
		}
		/**		 * Called when a dolmen have been added.		 */		private function addDolmenCompleteHandler(event:DolmenMapDataEvent):void {			_map.centerOn(DolmenData.getInstance().lastDolmenAdded);
		}				/**		 * Called when model asks for map rendering		 */
		private function updateMapHandler(event:DolmenMapDataEvent):void {
			_map.update();		}
		/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_map.width	= Math.min(1024, _width);			_map.height	= Math.min(768, _height);			_map.x		= Math.round((_width - _map.width) * .5);			_map.y		= Math.round((_height - _map.height) * .5);			_tooltip.x	= Math.round((_width - _tooltip.width) * .5);			_tooltip.y	= Math.round((_height - _tooltip.height) * .5);		}								//__________________________________________________________ SERVER RESULTS				/**		 * Called when new dolmens are loaded.		 */		private function loadDolmensCompleteHandler(event:DolmenMapDataEvent):void {			var data:Vector.<MapEntry> = event.dolmens;			var i:int, len:int, mapData:Vector.<MapEntry>;			len = data.length;			mapData = new Vector.<MapEntry>();			for(i = 0; i < len; ++i) {				mapData[i] = new MapEntry(data[i].x - 2, data[i].y - 2, new MapIconDolmenZone(), null);			}			mapData = mapData.concat(data);			_map.populate(mapData, event.area);			_map.enable();		}				/**		 * Called if dolmens loading failed		 */		private function loadDolmensErrorHandler(event:DolmenMapDataEvent):void {			_map.populate(new Vector.<MapEntry>(), event.area);			_map.enable();			_tooltip.open(new ToolTipMessage(new TTTextContent(true, Label.getLabel("dolmensLoadServerError"+event.resultCode), "tooltipContentError"), null));			setTimeout(_tooltip.close, 2000);			computePositions();		}		/**		 * Called when the map engine needs new data.		 */		private function mapRequestDataHandler(event:MapEngineEvent):void {			DolmenData.getInstance().getDolmens(event.dataRect);		}	}}