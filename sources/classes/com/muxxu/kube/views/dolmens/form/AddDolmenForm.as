package com.muxxu.kube.views.dolmens.form {	import gs.TweenLite;	import com.muxxu.kube.components.LoaderSpinning;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.button.OpenCloseFormButton;	import com.muxxu.kube.components.form.KubeCheckBox;	import com.muxxu.kube.components.form.KubeInput;	import com.muxxu.kube.data.DolmenData;	import com.muxxu.kube.events.DolmenMapDataEvent;	import com.nurun.components.form.events.FormComponentEvent;	import com.nurun.components.text.CssTextField;	import com.nurun.components.vo.Margin;	import com.nurun.structure.environnement.configuration.Config;	import com.nurun.structure.environnement.label.Label;	import flash.display.DisplayObject;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	/**	 * Displays the add image form.<br>	 * <br>	 * The form provides the user to upload an image with some informations to	 * the server's database.	 * 	 * @author  Francois	 */	public class AddDolmenForm extends Sprite {		private var _width:Number;		private var _height:Number;		private var _openCloseBar:OpenCloseFormButton;		private var _xInput:KubeInput;		private var _yInput:KubeInput;		private var _coordinatesLabel:CssTextField;		private var _mask:Shape;		private var _opened:Boolean;		private var _formCtn:Sprite;		private var _submitButton:KubeButton;		private var _spin:LoaderSpinning;		private var _resultTxt:CssTextField;		private var _timerClear:Timer;		private var _hideDolmen:KubeCheckBox;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AddImageForm</code>.		 */		public function AddDolmenForm() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's hright.		 */		override public function get height():Number { return _mask.height; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the form.		 */		public function open():void {			_opened = true;			TweenLite.to(this, .5, {height:_formCtn.y + _formCtn.height, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)]});		}				/**		 * Closes the form.		 */		public function close():void {			_opened = false;			_resultTxt.text	= "";			TweenLite.to(this, .5, {height:_openCloseBar.height, onUpdate:dispatchEvent, onUpdateParams:[new Event(Event.RESIZE)]});		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_timerClear		= new Timer(5000, 1);			_openCloseBar	= addChild(new OpenCloseFormButton(Label.getLabel("dolmensFormOpener"))) as OpenCloseFormButton;			_formCtn		= addChild(new Sprite()) as Sprite;			_coordinatesLabel= _formCtn.addChild(new CssTextField("galleryFormLabel")) as CssTextField;			_xInput			= _formCtn.addChild(new KubeInput("x")) as KubeInput;			_yInput			= _formCtn.addChild(new KubeInput("y")) as KubeInput;			_submitButton	= _formCtn.addChild(new KubeButton(Label.getLabel("dolmensFormSubmitLabel"))) as KubeButton;			_resultTxt		= _formCtn.addChild(new CssTextField()) as CssTextField;			_mask			= addChild(new Shape()) as Shape;			_spin			= addChild(new LoaderSpinning()) as LoaderSpinning;						if(Config.getVariable("isEtnalta") == "true") {				_hideDolmen	= _formCtn.addChild(new KubeCheckBox("Masquer")) as KubeCheckBox;				_hideDolmen.selected = true;			}else{				_hideDolmen = new KubeCheckBox("");			}						_submitButton.contentMargin = new Margin(10, 4, 10, 4);			_coordinatesLabel.text= Label.getLabel("dolmensFormZoneLabel");			_height				= _openCloseBar.height;			_resultTxt.wordWrap	= true;						var i:int = 3;			_xInput.tabIndex		= i++;			_yInput.tabIndex		= i++;			if(Config.getVariable("isEtnalta") == "true") _hideDolmen.tabIndex	= i++;			_submitButton.tabIndex	= i++;						_xInput.textfield.restrict = "0-9\\-";			_yInput.textfield.restrict = "0-9\\-";						_mask.graphics.beginFill(0xFFFFFF, 0);			_mask.graphics.drawRect(0, 0, 10, 10);			_formCtn.mask = _mask;						addEventListener(FocusEvent.FOCUS_IN,						focusInHandler);			_timerClear.addEventListener(TimerEvent.TIMER_COMPLETE,		timerClearCompleteHandler);			_openCloseBar.addEventListener(MouseEvent.CLICK,			clickButtonHandler);			_submitButton.addEventListener(MouseEvent.CLICK,			clickButtonHandler);			_hideDolmen.addEventListener(Event.CHANGE,					clickButtonHandler);			_xInput.addEventListener(FormComponentEvent.SUBMIT,			clickButtonHandler);			_yInput.addEventListener(FormComponentEvent.SUBMIT,			clickButtonHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.ADD_DOLMEN_COMPLETE, addDolmenResultHandler);			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.ADD_DOLMEN_ERROR, addDolmenResultHandler);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_openCloseBar.width	= _width;			_openCloseBar.validate();			_mask.width		= _width;			_mask.height	= _height;						_formCtn.x		= 5;			_formCtn.y		= Math.round(_openCloseBar.y + _openCloseBar.height + 5);						_coordinatesLabel.y= Math.round((_xInput.height - _coordinatesLabel.height) * .5);			_xInput.x		= Math.round(_coordinatesLabel.x + _coordinatesLabel.width);						_yInput.x		= Math.round(_xInput.x + _xInput.width) + 10;						_hideDolmen.x	= Math.round(_yInput.x + _yInput.width) + 10;			_hideDolmen.y	= Math.round((_xInput.height - _hideDolmen.height) * .5);						_submitButton.y	= 0;			_submitButton.x	= Math.round(_hideDolmen.x + _hideDolmen.width) + 20;			_submitButton.height = _xInput.height;						_resultTxt.y	= Math.round(_submitButton.y + _submitButton.height + 4);			_resultTxt.x	= 0;			_resultTxt.width= _width;						_spin.x		= _width - _spin.width * .5 - 10;			_spin.y		= _height - _spin.height * .5 - 10;						graphics.clear();			graphics.beginFill(0xFFFFFF, .35);			graphics.drawRect(0, _openCloseBar.height, _width, _height - _openCloseBar.height);		}				/**		 * Called when the component receives the focus.		 */		private function focusInHandler(event:FocusEvent):void {			if(!_opened && _formCtn.contains(stage.focus as DisplayObject)) open();		}				/**		 * Called when submit button is clicked or when ENTER key is pressed on an input field.		 */		private function clickButtonHandler(e:Event):void {			var target:DisplayObject = e.currentTarget as DisplayObject;			if(target == _openCloseBar) {				if(_opened) { 					close();				} else {					open();				}			} else {				_coordinatesLabel.style = "galleryFormLabel";				if(!_submitButton.enabled) return;				if(_xInput.text.length == 0 || _xInput.text == _xInput.defaultLabel || isNaN(parseInt(_xInput.text))) {					_coordinatesLabel.style = "galleryFormLabelError";					return;				}				if(_yInput.text.length == 0 || _yInput.text == _yInput.defaultLabel || isNaN(parseInt(_yInput.text))) {					_coordinatesLabel.style = "galleryFormLabelError";					return;				}				DolmenData.getInstance().addDolmen(parseInt(_xInput.text), parseInt(_yInput.text), _hideDolmen.selected);				_submitButton.enabled = false;				_spin.open();				timerClearCompleteHandler();			}		}				/**		 * Called on server's callback.		 */		private function addDolmenResultHandler(e:DolmenMapDataEvent):void {			if(e.resultCode == 0) {				_resultTxt.style	= "galleryFormSuccess";				_resultTxt.text		= Label.getLabel("dolmenFormSuccess");			} else{				_resultTxt.style	= "galleryFormServerError";				_resultTxt.text		= Label.getLabel("dolmenFormServerError"+e.resultCode);			}			open();						_submitButton.enabled = true;			_spin.close();			_timerClear.reset();			_timerClear.start();		}				/**		 * Called when clear timer completes to hide success or error message.		 */		private function timerClearCompleteHandler(e:TimerEvent = null):void {			if(e != null && !_opened) return;			_resultTxt.text	= "";			open();		}	}}