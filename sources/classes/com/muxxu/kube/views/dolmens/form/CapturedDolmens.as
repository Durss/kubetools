package com.muxxu.kube.views.dolmens.form {	import flash.filters.DropShadowFilter;
	import com.muxxu.kube.graphics.CaptureDolmensSelectedIcon;
	import com.muxxu.kube.components.KubeScrollbar;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.button.KubeToggleButton;	import com.muxxu.kube.data.DolmenData;	import com.muxxu.kube.events.DolmenMapDataEvent;	import com.muxxu.kube.graphics.CaptureDolmensIcon;	import com.muxxu.kube.views.Background;	import com.muxxu.kube.views.dolmens.components.AddDolmenEntry;	import com.muxxu.kube.vo.Dolmen;	import com.nurun.components.button.IconAlign;	import com.nurun.components.form.GroupableFormComponent;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableList;	import com.nurun.components.text.CssTextField;	import com.nurun.components.vo.Margin;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * 	 * @author Francois	 */	public class CapturedDolmens extends Sprite {				private var _height:Number = 100;		private var _width:Number = 250;
		private var _background:Background;
		private var _list:ScrollableList;
		private var _scrollpane:ScrollPane;
		private var _touched:Array;
		private var _label:CssTextField;
		private var _submitDolmens:KubeButton;
		private var _enableBt:KubeToggleButton;
		private var _details:CssTextField;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>CapturedDolmens</code>.		 */		public function CapturedDolmens() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the height of the component without simply scaling it.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the height of the component.		 */		override public function get height():Number { return _height; }				/**		 * Gets the width of the component.		 */		override public function get width():Number { return enabled? _width : _enableBt.width + 10; }		/**		 * Gets the total of items registered.		 */		public function get length():int { return _list.length; }		/**		 * Gets if the capture is enabled or not.		 */		public function get enabled():Boolean { return _enableBt.selected; }						/* ****** *		 * PUBLIC *		 * ****** */		 public function open():void {			scrollRect = null;		 }		 		 public function close():void {			scrollRect = new Rectangle(-_enableBt.width - 10, 0, _enableBt.width + 10, _height);		 }						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_touched		= [];			_enableBt		= addChild(new KubeToggleButton("Radar", new CaptureDolmensIcon(), new CaptureDolmensSelectedIcon())) as KubeToggleButton;			_background		= addChild(new Background()) as Background;			_label			= addChild(new CssTextField("dolmenCaptureTitle")) as CssTextField;			_details		= addChild(new CssTextField("dolmenCaptureDetails")) as CssTextField;			_list			= new ScrollableList(null);			_scrollpane		= addChild(new ScrollPane(_list, new KubeScrollbar())) as ScrollPane;			_submitDolmens	= addChild(new KubeButton(Label.getLabel("dolmenSaveTouched"))) as KubeButton;						_enableBt.iconAlign = IconAlign.LEFT;			_label.text		= Label.getLabel("dolmenTouchedTitle");			_submitDolmens.contentMargin = new Margin(10, 5, 10, 5);			filters = [new DropShadowFilter(4,135,0,.35,4,4,1,3)];						_enableBt.addEventListener(Event.CHANGE, clickEnableHandler);			_submitDolmens.addEventListener(MouseEvent.CLICK, submitHandler);			_label.addEventListener(MouseEvent.CLICK, clickLabelHandler);			_details.addEventListener(MouseEvent.ROLL_OVER, rollOverDetailsHandler);			_details.addEventListener(MouseEvent.ROLL_OUT, rollOutDetailsHandler);			rollOutDetailsHandler();			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.DOLMEN_TOUCHED, dolmenTouchedHandler);		}
				/**		 * Called when enable/disable button is clicked.		 */		private function clickEnableHandler(event:Event):void {			DolmenData.getInstance().radarEnabled = _enableBt.selected;			dispatchEvent(event);
		}
		/**		 * Called when the details are rolled over.		 */		private function rollOverDetailsHandler(event:MouseEvent):void {
			_details.text	= Label.getLabel("dolmenTouchedDetails");			computePositions();
		}				/**		 * Called when the details are rolled out.		 */		private function rollOutDetailsHandler(event:MouseEvent = null):void {			var label:String= Label.getLabel("dolmenTouchedDetails");			var pos:int		= label.search(/<split ?\/? ?>/gi);			_details.text	= label.substring(0,pos)+"<span class=\"link\">[...]</a>";			computePositions();
		}
		/**		 * Used for debug.		 */		private function clickLabelHandler(event:MouseEvent):void {			if(!event.ctrlKey || event.shiftKey) return;						var pos:Point = new Point(Math.round((Math.random()-Math.random())*3000), Math.round((Math.random()-Math.random())*3000));			var e:DolmenMapDataEvent = new DolmenMapDataEvent(DolmenMapDataEvent.DOLMEN_TOUCHED,0, new Rectangle(pos.x, pos.y,0,0));			dolmenTouchedHandler(e);
		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var margins:int = Background.CELL_WIDTH * 3;			_background.width = _width;			_background.height = _height;			_background.scrollRect = new Rectangle(0,0,_width,_height);			_label.width = _width - margins;			_label.x = margins;			_label.y = margins;			_details.width = _width - margins;			_details.x = margins;			_details.y = Math.round(_label.y + _label.height + 5);			_scrollpane.y = Math.round(_details.y + _details.height + 10);			_scrollpane.x = _label.x;			_scrollpane.height = Math.round(_height - _scrollpane.y - _submitDolmens.height - 10 - margins);			_scrollpane.width = _width - _scrollpane.x * 2;			_submitDolmens.x = Math.round((_width - _submitDolmens.width) * .5);			_submitDolmens.y = Math.round(_scrollpane.y + _scrollpane.height + 10);			_enableBt.x = -_enableBt.width;		}		/**		 * Called when a dolmen is touched.		 */		private function dolmenTouchedHandler(event:DolmenMapDataEvent):void {			if(!enabled) return;						var pos:Point = new Point(event.area.x, event.area.y);			if(_touched[pos.x+"_"+pos.y] !== true && event.resultCode == 0) {				_touched[pos.x+"_"+pos.y] = true;				var entry:AddDolmenEntry = new AddDolmenEntry(pos);				entry.addEventListener(Event.CLOSE, removeEntryHandler);				_list.addItem(entry, pos);				_scrollpane.validate();				dispatchEvent(new Event(Event.RESIZE));			}		}				/**		 * Called when an entry asks to be removed.		 */		private function removeEntryHandler(event:Event):void {			_list.removeItem(event.currentTarget as GroupableFormComponent);
		}
		/**		 * Submits the dolmens.		 */		private function submitHandler(event:MouseEvent):void {			if(!enabled) return;						var i:int, len:int, entry:AddDolmenEntry, dolmens:Vector.<Dolmen>;			len = _list.length;			dolmens = new Vector.<Dolmen>();			for(i = 0; i < len; ++i) {				entry = _list.getItemAt(i) as AddDolmenEntry;				if(entry.selected) {					dolmens.push(new Dolmen(entry.pos.x, entry.pos.y, entry.hidden));				}			}			if(dolmens.length > 0){				DolmenData.getInstance().addDolmens(dolmens);			}		}	}}