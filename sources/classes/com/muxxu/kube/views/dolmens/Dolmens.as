package com.muxxu.kube.views.dolmens {	import com.muxxu.kube.events.KTModelEvent;	import com.muxxu.kube.views.AbstractKTView;	import com.muxxu.kube.views.dolmens.form.AddDolmenForm;	import com.muxxu.kube.views.dolmens.form.CapturedDolmens;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Templates;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.events.Event;	/**	 * Displays the dolmens view.	 * 	 * @author  Francois	 */	public class Dolmens extends AbstractKTView {				private var _addForm:AddDolmenForm;
		private var _map:DolmenMap;
		private var _capturedList:CapturedDolmens;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Dolmens</code>.		 */		public function Dolmens() {					}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 */		override public function update(e:IModelEvent):void {			var message:Message = KTModelEvent(e).message;						if(message.id == MessageIds.CHANGE_VIEW){				if(message.data == Templates.DOLMENS) {					//GalleryData.getInstance().getResults();					show();					addChildOutsidePane(_addForm);					addChildOutsidePane(_map);					addChildOutsidePane(_capturedList);					_map.enable();				}else if(containsOutsidePane(_addForm)) {					hide();					removeChildOutsidePane(_addForm);					removeChildOutsidePane(_map);					removeChildOutsidePane(_capturedList);					_map.disable();				}			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		override protected function initialize():void {			super.initialize();			_addForm	= addChildOutsidePane(new AddDolmenForm()) as AddDolmenForm;			_map		= addChildOutsidePane(new DolmenMap()) as DolmenMap;			_capturedList= addChildOutsidePane(new CapturedDolmens()) as CapturedDolmens;						_addForm.addEventListener(Event.RESIZE,			computePositions);			_capturedList.addEventListener(Event.RESIZE,	computePositions);			_capturedList.addEventListener(Event.CHANGE,	computePositions);		}		/**		 * Resizes and replaces the elements.		 */		override protected function computePositions(e:Event = null):void {			_addForm.width	= _width;			_addForm.y		= Math.round(_height - _addForm.height);			_map.height		= _height - _addForm.height;						if(_capturedList.enabled) {				_capturedList.open();				_capturedList.x = _width - _capturedList.width;				_capturedList.height = _map.height;			}else{				_capturedList.close();				_capturedList.x = _width - _capturedList.width;			}			_map.width = _width;		}	}}