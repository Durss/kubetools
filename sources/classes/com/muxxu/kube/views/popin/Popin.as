package com.muxxu.kube.views.popin {	import gs.TweenLite;	import com.muxxu.kube.events.PopinErrorEvent;	import com.muxxu.kube.graphics.AlertWindowBackground;	import com.muxxu.kube.graphics.window.CloseIcon;	import com.nurun.components.button.GraphicButton;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.label.Label;	import com.nurun.structure.mvc.model.events.IModelEvent;	import com.nurun.structure.mvc.views.AbstractView;	import com.nurun.structure.mvc.views.ViewLocator;	import com.nurun.utils.text.TextBounds;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.geom.Rectangle;	import flash.ui.Keyboard;	/**	 * Displays a popin.	 * 	 * @author  Francois	 */	public class Popin extends AbstractView {		private var _disableLayer:Sprite;		private var _back:AlertWindowBackground;		private var _title:CssTextField;		private var _content:CssTextField;		private var _container:Sprite;		private var _close:GraphicButton;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Popin</code>.		 */		public function Popin() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 */		override public function update(e:IModelEvent):void { }				public function close(...args):void {			TweenLite.to(this, .5, {autoAlpha:0});		}				public function open(...args):void {			TweenLite.to(this, .5, {autoAlpha:1});		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			alpha = 0;			visible = false;						_disableLayer	= addChild(new Sprite()) as Sprite;			_container		= addChild(new Sprite()) as Sprite;			_back			= _container.addChild(new AlertWindowBackground()) as AlertWindowBackground;			_title			= _container.addChild(new CssTextField("alertTitle")) as CssTextField;			_content		= _container.addChild(new CssTextField("alertContent")) as CssTextField;			_close			= _container.addChild(new GraphicButton(null, new CloseIcon())) as GraphicButton;						_title.text		= Label.getLabel("error");			_disableLayer.graphics.beginFill(0, .5);			_disableLayer.graphics.drawRect(0, 0, 100, 100);						_close.addEventListener(MouseEvent.CLICK, close);			_disableLayer.addEventListener(MouseEvent.CLICK, close);			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			ViewLocator.getInstance().addEventListener(PopinErrorEvent.ERROR, errorEventHandler);		}		/**		 * Resize and replace the elements.		 */		private function computePositions(e:Event = null):void {			_disableLayer.width		= stage.stageWidth;			_disableLayer.height	= stage.stageHeight;						var margins:int	= 10;			var headH:int	= 17;			var titleBounds:Rectangle	= TextBounds.getBounds(_title);			var contentBounds:Rectangle	= TextBounds.getBounds(_content);			_back.width		= Math.max(titleBounds.width + 30, contentBounds.width + margins * 2);			_back.height	= contentBounds.height + headH + margins * 2;			_title.x		= Math.round((_back.width - titleBounds.width) * .5 - titleBounds.x);			_title.y		= Math.round((headH - titleBounds.height) * .5 - titleBounds.y);			_content.x		= -contentBounds.x + margins;			_content.y		= headH - contentBounds.y + margins;						_close.x		= _back.width - _close.width - 2;			_close.y		= 4;						_container.x	= Math.round((stage.stageWidth - _container.width) * .5);			_container.y	= Math.round((stage.stageHeight - _container.height) * .5);						filters = [new DropShadowFilter(2,45,0,.5,5,5,1,3)];		}		/**		 * Called when the stage is available.		 */		private function addedToStageHandler(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);						stage.addEventListener(Event.RESIZE, computePositions);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);		}				/**		 * Called when a key is released.		 */		private function keyUpHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.ESCAPE || e.keyCode == Keyboard.ENTER){				close();			}		}		/**		 * Called when an error occured.		 */		private function errorEventHandler(e:PopinErrorEvent):void {			_content.text = e.description;			open();			computePositions();		}			}}