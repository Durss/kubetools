package com.muxxu.kube.views {	import com.muxxu.kube.components.KubeScrollbar;	import com.nurun.components.invalidator.Invalidator;	import com.nurun.components.invalidator.Validable;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableDisplayObject;	import com.nurun.structure.mvc.views.AbstractView;	import com.nurun.structure.mvc.views.IView;	import flash.display.DisplayObject;	import flash.events.Event;	/**	 * Abstract view that automatically manages its invalidation cycle.	 * 	 * @author  Francois	 */	public class AbstractKTView extends AbstractView implements IView, Validable {				protected var _pane:ScrollPane;		protected var _scrollable:ScrollableDisplayObject;		protected var _hScroller:KubeScrollbar;		protected var _vScroller:KubeScrollbar;		protected var _height:int;		protected var _width:int;		protected var _invalidator:Invalidator;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AbstractKTView</code>.		 */		public function AbstractKTView() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		override public function set width(value:Number):void {			if(value == _width) return;			_width = value;			if(visible){				_invalidator.invalidate();			}		}				override public function set height(value:Number):void {			if(value == _height) return;			_height = value;			if(visible){				_invalidator.invalidate();			}		}				override public function get width():Number { return _width; }				override public function get height():Number { return _height; }				/**		 * Called when visibility is changed.		 */		override public function set visible(value:Boolean):void {			var exValue:Boolean = visible;			super.visible = value;			if(value && !exValue) {				computePositions();				_invalidator.invalidate();			}		}				/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Validates the component.		 */		public function validate():void {			_invalidator.flagAsValidated();			computePositions();		}				public function containsOutsidePane(value:DisplayObject):Boolean { return super.contains(value); }				public function addChildOutsidePane(value:DisplayObject):DisplayObject { return super.addChild(value); }				public function addChildAtOutsidePane(value:DisplayObject, level:int):DisplayObject { return super.addChildAt(value, level); }				public function removeChildOutsidePane(value:DisplayObject):DisplayObject { return super.removeChild(value); }				public function removeChildAtOutsidePane(level:int):DisplayObject { return super.removeChildAt(level); }				override public function addChild(value:DisplayObject):DisplayObject { return _scrollable.content.addChild(value); }				override public function addChildAt(value:DisplayObject, level:int):DisplayObject { return _scrollable.content.addChildAt(value, level); }				override public function removeChild(value:DisplayObject):DisplayObject { return _scrollable.content.removeChild(value); }				override public function removeChildAt(level:int):DisplayObject { return _scrollable.content.removeChildAt(level); }								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		protected function initialize():void {			_invalidator= new Invalidator(this);			_vScroller	= new KubeScrollbar();			_hScroller	= new KubeScrollbar();			_scrollable	= new ScrollableDisplayObject();			_pane		= super.addChild(new ScrollPane(_scrollable, _vScroller, _hScroller)) as ScrollPane;					_pane.autoHideScrollers = true;		}				/**		 * Resize and replace the elements.		 */		protected function computePositions(e:Event = null):void {			_pane.width = _width;			_pane.height = _height;			_vScroller.percent = 0;			_hScroller.percent = 0;			_pane.update(true);		}				/**		 * Show the elements.<br>		 * <br>		 * Resets the pane to the display list.		 */		protected function show():void {			super.addChild(_pane);		}				/**		 * Hides the elements.<br>		 * <br>		 * Removes the pane from the display list to free a bit of memory.		 */		protected function hide():void {			if(super.contains(_pane)) {				super.removeChild(_pane);			}		}	}}