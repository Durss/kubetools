package com.muxxu.kube.views.generator.menus {	import com.muxxu.kube.components.KubeScrollbar;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.events.ViewEvent;	import com.muxxu.kube.graphics.StatsIcon;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Texture;	import com.nurun.components.form.List;	import com.nurun.structure.environnement.label.Label;	import com.nurun.structure.mvc.views.ViewLocator;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.utils.Dictionary;	/**	 * Displays a texture counter.	 * 	 * @author  Francois	 */	public class Counter extends Sprite {				private var _texturesRelations:Dictionary;		private var _list:List;		private var _height:Number;		private var _width:Number;		private var _statButton:KubeButton;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Counter</code>.		 */		public function Counter() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Sets the component's height.		 */		override public function set height(value:Number):void {			_height = value;			computePositions();		}				/**		 * Gets the virtual component's width.		 */		override public function get width():Number { return _width; }				/**		 * Gets the virtual component's hright.		 */		override public function get height():Number { return _height; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called when model's state changes		 */		public function update(message:Message):void {						//Update or clear instruction.			if(message.id == MessageIds.UPDATE_COUNTER || message.id == MessageIds.CLEAR_GRID) {				if(message.id == MessageIds.CLEAR_GRID) {					_texturesRelations = new Dictionary();				}				updateList();			}		}		/**		 * Updates the item's list.		 */		private function updateList():void {			_list.removeAll();						var item:CounterItem;			for (var i:Object in _texturesRelations) {				item = new CounterItem(i as Texture, _texturesRelations[i]);				_list.addItem(item);			}						computePositions();		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_texturesRelations = new Dictionary();			_list		= addChild(new List(new KubeScrollbar())) as List;			_statButton = addChild(new KubeButton(Label.getLabel("statsButton"), new StatsIcon())) as KubeButton;						_width	= 200;			_height	= 500;						_statButton.addEventListener(MouseEvent.CLICK, clickStatsHandler);			ViewLocator.getInstance().addEventListener(ViewEvent.FILL_CELL,		cellContentChangeHandler);			ViewLocator.getInstance().addEventListener(ViewEvent.EMPTY_CELL,	cellContentChangeHandler);						computePositions();		}				/**		 * Called when stat button is clicked.		 */		private function clickStatsHandler(e:MouseEvent):void {			FrontControler.getInstance().sendMessage(MessageIds.DISPLAY_TOOLS_STATS);		}		/**		 * Called when a cell content changes.		 */		private function cellContentChangeHandler(e:ViewEvent):void {			var texture:Texture = e.data as Texture;						//Fill a cell			if(e.type == ViewEvent.FILL_CELL) {				if(texture != null) {					if(_texturesRelations[texture] == null){						_texturesRelations[texture] = 1;					}else{						_texturesRelations[texture] ++;					}				}			}						//Empty cell			if(e.type == ViewEvent.EMPTY_CELL) {				if(texture != null) {					if(_texturesRelations[texture] != null){						_texturesRelations[texture] --;					}					if(_texturesRelations[texture] < 1){						delete _texturesRelations[texture];					}				}			}		}		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_list.width		= _width;			_list.height	= _height;			_statButton.y = _list.scrollableList.heightMax + _list.y + 20;			_statButton.x = Math.round((_width - _statButton.width) * .5);			_statButton.visible = _list.scrollableList.length > 0;		}	}}