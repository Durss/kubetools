package com.muxxu.kube.views.generator.menus {	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.graphics.CamIcon;	import com.muxxu.kube.graphics.ImageIcon;	import com.muxxu.kube.graphics.LoadIcon;	import com.muxxu.kube.graphics.RubberIcon;	import com.muxxu.kube.graphics.SaveIcon;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.events.MouseEvent;	/**	 * Displays the menu at the top of the generator.	 * 	 * @author  Francois	 */	public class GeneratorMenu extends Sprite {		private var _createFromFile:KubeButton;		private var _clear:KubeButton;		private var _firstUpdate:Boolean;		private var _createFromCam:KubeButton;		private var _loadFile:KubeButton;		private var _saveFile:KubeButton;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GeneratorMenu</code>.		 */		public function GeneratorMenu() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 */		public function update(message:Message):void {			message;//Avoid unused warnings from FDT		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_firstUpdate	= true;			_clear			= addChild(new KubeButton(Label.getLabel("clearGrid"), new RubberIcon())) as KubeButton;			_createFromFile	= addChild(new KubeButton(Label.getLabel("createFromFile"), new ImageIcon())) as KubeButton;			_createFromCam	= addChild(new KubeButton(Label.getLabel("createFromCam"), new CamIcon())) as KubeButton;			_loadFile		= addChild(new KubeButton(Label.getLabel("loadFile"), new LoadIcon())) as KubeButton;			_saveFile		= addChild(new KubeButton(Label.getLabel("saveFile"), new SaveIcon())) as KubeButton;						_clear.addEventListener(MouseEvent.CLICK,			clicButtonHandler);			_loadFile.addEventListener(MouseEvent.CLICK,		clicButtonHandler);			_saveFile.addEventListener(MouseEvent.CLICK,		clicButtonHandler);			_createFromCam.addEventListener(MouseEvent.CLICK,	clicButtonHandler);			_createFromFile.addEventListener(MouseEvent.CLICK,	clicButtonHandler);						computePositions();		}		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			//Columns 1			_loadFile.x			= 0;			_loadFile.y			= 0;						_saveFile.x			= 0;			_saveFile.y			= _loadFile.y + _loadFile.height + 5;			if(_saveFile.width < _loadFile.width) {				_saveFile.width = _loadFile.width;			}else{				_loadFile.width = _saveFile.width;			}						//Column 2			_createFromFile.x	= _loadFile.x + _loadFile.width + 5;			_createFromFile.y	= _loadFile.y;						_createFromCam.x	= _createFromFile.x;			_createFromCam.y	= _saveFile.y;						if(_createFromCam.width < _createFromFile.width) {				_createFromCam.width = _createFromFile.width;			}else{				_createFromFile.width = _createFromCam.width;			}						//Column 3			_clear.x	= _createFromFile.x + _createFromFile.width + 5;			_clear.y	= _createFromFile.y;		}				/**		 * Called when clear button is clicked.		 */		private function clicButtonHandler(e:MouseEvent):void {			if(e.currentTarget == _clear){				FrontControler.getInstance().sendMessage(MessageIds.CLEAR_GRID);			}else if(e.currentTarget == _createFromFile) {				FrontControler.getInstance().browseForImage();			}else if(e.currentTarget == _createFromCam) {				FrontControler.getInstance().sendMessage(MessageIds.DISPLAY_TOOLS_CAM);			}else if(e.currentTarget == _saveFile) {				FrontControler.getInstance().sendMessage(MessageIds.SAVE_CURRENT_IMAGE);			}else if(e.currentTarget == _loadFile) {				FrontControler.getInstance().loadImage();			}		}	}}