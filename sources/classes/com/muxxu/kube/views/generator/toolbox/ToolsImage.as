package com.muxxu.kube.views.generator.toolbox {	import com.muxxu.kube.components.form.KubeNumericStepper;	import com.muxxu.kube.controler.FrontControler;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.label.Label;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;	/**	 * Displays the image generation parameters.	 * 	 * @author  Francois	 */	public class ToolsImage extends Sprite implements IToolBoxContent {				private var _colorsMax:KubeNumericStepper;		private var _firstUpdate:Boolean;		private var _colorsMaxLabel:CssTextField;		private var _timeUpdate:Timer;		private var _howToExit:CssTextField;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>ImageEditorOptions</code>.		 */		public function ToolsImage() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the toolbox title.		 */		public function get title():String { return Label.getLabel("toolBoxTitleParams"); }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 * 		 * @param message	 message data		 * 		 * @return if the content should be displayed or not.		 */		public function update(message:Message):Boolean {			if(_firstUpdate){				_firstUpdate = false;				changeColorsMaxHandler();			}			if(message.id == MessageIds.DISPLAY_TOOLS_IMAGE) {				visible = true;			} else if(MessageIds.isToolBoxMessage(message.id)) {				visible = false;			}			return visible;		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_firstUpdate	= true;			_howToExit		= addChild(new CssTextField("toolBoxLabel")) as CssTextField;			_colorsMaxLabel	= addChild(new CssTextField("toolBoxLabel")) as CssTextField;			_colorsMax		= addChild(new KubeNumericStepper(1, 30, 1)) as KubeNumericStepper;						visible			= false;			_timeUpdate		= new Timer(250, 1);			_colorsMax.value= 5;			_howToExit.wordWrap = true;			_howToExit.text	= Label.getLabel("toolBoxImageExit");			_colorsMaxLabel.text = Label.getLabel("toolBoxImageColorsMax");						_timeUpdate.addEventListener(TimerEvent.TIMER_COMPLETE, timerUpdateCompleteHandler),			_colorsMax.addEventListener(Event.CHANGE,	changeColorsMaxHandler);						computePositions();		}		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			removeChild(_howToExit);			_colorsMax.inputWidth= 33;			_colorsMax.x		= _colorsMaxLabel.width + 4;			_howToExit.width	= width;			addChild(_howToExit);			_colorsMax.y		= _howToExit.height + 7;			_colorsMaxLabel.y	= Math.round(_colorsMax.y + (_colorsMax.height - _colorsMaxLabel.height) * .5);		}				/**		 * Called when timer update completes.		 */		private function timerUpdateCompleteHandler(e:TimerEvent):void {			FrontControler.getInstance().changeColorsMax(_colorsMax.value);		}		/**		 * Called when color stepper's value changes.		 */		private function changeColorsMaxHandler(e:Event = null):void {			_timeUpdate.reset();			_timeUpdate.start();		}	}}