package com.muxxu.kube.views.generator.toolbox {	import com.muxxu.kube.components.form.KubeNumericStepper;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.events.ViewEvent;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Texture;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.configuration.Config;	import com.nurun.structure.environnement.label.Label;	import com.nurun.structure.mvc.views.ViewLocator;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.Dictionary;	/**	 * Displays some statistics about the current creation.	 * 	 * @author  Francois	 */	public class ToolsStats extends Sprite implements IToolBoxContent {		private var _texturesRelations:Dictionary;		private var _bagSize:KubeNumericStepper;		private var _bagSizeLabel:CssTextField;		private var _stats:CssTextField;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>ToolsStats</code>.		 */		public function ToolsStats() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the toolbox title.		 */		public function get title():String { return Label.getLabel("toolBoxTitleStats"); }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called on model's update.		 * 		 * @param message	 message data		 * 		 * @return if the content should be displayed or not.		 */		public function update(message:Message):Boolean {			if(message.id == MessageIds.DISPLAY_TOOLS_STATS) {				visible = !visible;				updateContent();			} else if(MessageIds.isToolBoxMessage(message.id) || message.id == MessageIds.CLEAR_GRID) {				visible = false;			}			if(message.id == MessageIds.UPDATE_COUNTER || message.id == MessageIds.CLEAR_GRID) {				if(message.id == MessageIds.CLEAR_GRID) {					_texturesRelations = new Dictionary();				}				updateContent();			}			return visible;		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			visible = false;			_bagSize		= addChild(new KubeNumericStepper(SharedObjectManager.getInstance().bagSize, 100, 10)) as KubeNumericStepper;			_bagSizeLabel	= addChild(new CssTextField("toolBoxLabel")) as CssTextField;			_stats			= addChild(new CssTextField("toolBoxLabel")) as CssTextField;			_texturesRelations = new Dictionary();						_stats.wordWrap	= true;			_bagSizeLabel.text = Label.getLabel("toolBoxStatsBagSize");						ViewLocator.getInstance().addEventListener(ViewEvent.FILL_CELL,		cellContentChangeHandler);			ViewLocator.getInstance().addEventListener(ViewEvent.EMPTY_CELL,	cellContentChangeHandler);						_bagSize.addEventListener(Event.CHANGE, updateContent);		}				/**		 * Called when a cell content changes.		 */		private function cellContentChangeHandler(e:ViewEvent):void {			var texture:Texture = e.data as Texture;						//Fill a cell			if(e.type == ViewEvent.FILL_CELL) {				if(texture != null) {					if(_texturesRelations[texture] == null){						_texturesRelations[texture] = 1;					}else{						_texturesRelations[texture] ++;					}				}			}						//Empty cell			if(e.type == ViewEvent.EMPTY_CELL) {				if(texture != null) {					if(_texturesRelations[texture] != null){						_texturesRelations[texture] --;					}					if(_texturesRelations[texture] < 1){						delete _texturesRelations[texture];					}				}			}		}				/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			_bagSize.width	= 50;			_bagSize.x		= Math.round(_bagSizeLabel.width + 5);			_bagSizeLabel.y = Math.round((_bagSize.height - _bagSizeLabel.height) * .5);			_stats.width	= Math.round(_bagSize.x + _bagSize.width);			_stats.y		= Math.round(_bagSize.height + 2);			dispatchEvent(new Event(Event.RESIZE));		}		/**		 * Updates the statistics.		 */		private function updateContent(e:Event = null):void {			if(!visible) return;			if(e != null){				SharedObjectManager.getInstance().bagSize = _bagSize.value;			}			var energy:int, waters:int, roundTrips:int, kubes:int, bagSize:int, tokens:int;			energy = Config.getNumVariable("kubesPerBar");			bagSize = _bagSize.value;			for (var i:Object in _texturesRelations) {				kubes += _texturesRelations[i];				roundTrips = Math.max(roundTrips, Math.floor((_texturesRelations[i]-1) / bagSize));			}			waters = Math.floor(((kubes * 2)-1) / energy);			tokens = Config.getNumVariable("waterCost") * waters;			_stats.text = Label.getLabel("toolBoxStatsContent").replace(/\$\{kubes\}/gi, kubes).replace(/\$\{tokens\}/gi, tokens).replace(/\$\{waters\}/gi, waters).replace(/\$\{roundTrips\}/gi, roundTrips);			computePositions();		}	}}