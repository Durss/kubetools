package com.muxxu.kube.views.generator {	import com.muxxu.kube.events.KTModelEvent;	import com.muxxu.kube.views.AbstractKTView;	import com.muxxu.kube.views.generator.grid.Grid;	import com.muxxu.kube.views.generator.grid.ImageEditor;	import com.muxxu.kube.views.generator.menus.Counter;	import com.muxxu.kube.views.generator.menus.GeneratorMenu;	import com.muxxu.kube.views.generator.toolbox.ToolBox;	import com.muxxu.kube.vo.Message;	import com.muxxu.kube.vo.MessageIds;	import com.muxxu.kube.vo.Templates;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.display.Graphics;	import flash.events.Event;	import flash.geom.Rectangle;	/**	 * Displays the generator view.	 * 	 * @author  Francois	 */	public class Generator extends AbstractKTView {		private var _grid:Grid;		private var _menu:GeneratorMenu;		private var _counter:Counter;		private var _imageEditor:ImageEditor;		private var _toolBox:ToolBox;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Generator</code>.		 */		public function Generator() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called when model's state changes		 */		override public function update(e:IModelEvent):void {			var message:Message = KTModelEvent(e).message;						_menu.update(message);			_counter.update(message);			_grid.update(message);			_imageEditor.update(message);			_toolBox.update(message);						if(message.id == MessageIds.CHANGE_VIEW){				if(message.data == Templates.GENERATOR) {					show();					addChildOutsidePane(_toolBox);				}else if(contains(_grid)) {					hide();					removeChildOutsidePane(_toolBox);				}			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize():void {			super.initialize();			_grid			= addChild(new Grid()) as Grid;			_menu			= addChild(new GeneratorMenu()) as GeneratorMenu;			_counter		= addChild(new Counter()) as Counter;			_imageEditor	= addChild(new ImageEditor()) as ImageEditor;			_toolBox		= addChildOutsidePane(new ToolBox()) as ToolBox;		}				/**		 * Resize and replace the elements.		 */		override protected function computePositions(e:Event = null):void {			_scrollable.content.graphics.clear();			_menu.y = 5;			_menu.x = 5;						_counter.y		= Math.round(_menu.y + _menu.height + 5);			_counter.width	= (_width < 200)? _width * .5 : 100;			_counter.height	= Math.max(_height - _counter.y, _grid.height);						_grid.x = Math.max(_counter.width, Math.round((_width - _counter.width - _grid.width) * .5) + _counter.width);			_grid.y = Math.max(_counter.y, Math.round((_height - _counter.y - _grid.height) * .5 + _counter.y));						_imageEditor.x		= _grid.x;			_imageEditor.y		= _grid.y;			_imageEditor.width	= _grid.width;			_imageEditor.height	= _grid.height;						super.computePositions();						//Defines the rect where the toolbox can be dragged in.			var rect:Rectangle = new Rectangle();			rect. x = _counter.width;			rect. y = _counter.y;			rect.width = _pane.visibleWidth - rect.x;			rect.height = _pane.visibleHeight - rect.y;			_toolBox.dragBounds = rect;						//the shapes are drawn here and not on menu and/or counter because			//if they were, the scrollpane would make them scroll.			var g:Graphics = _scrollable.content.graphics;			g.beginFill(0xFFFFFFF, .5);			g.drawRect(0, 0, Math.max(width, _grid.x + _grid.width), _counter.y);			g.beginFill(0xFFFFFFF, .5);			g.drawRect(0, _counter.y, _counter.width, _counter.height);		}	}}