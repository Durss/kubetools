package com.muxxu.kube.components.syswindowcontent {	import com.muxxu.kube.components.KubeScrollbar;	import com.muxxu.kube.components.form.KubeNumericStepper;	import com.muxxu.kube.components.map.MapEntry;	import com.muxxu.kube.components.map.icons.MapIconMapPattern;	import com.muxxu.kube.data.DolmenData;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.events.DolmenMapDataEvent;	import com.muxxu.kube.graphics.DolmenIcon;	import com.muxxu.kube.vo.Point3D;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableTextField;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.label.Label;	import com.nurun.utils.text.TextBounds;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TextEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.TextFieldAutoSize;	import flash.utils.setTimeout;	/**	 * 	 * @author Francois	 */	public class SystemWindowDolmens extends Sprite {				private var _icon:DolmenIcon;
		private var _label:ScrollableTextField;
		private var _distLabel:CssTextField;
		private var _distStepper:KubeNumericStepper;		private var _data:Vector.<MapEntry>;		private var _playerPos:Point3D;
		private var _pattern:BitmapData;
		private var _grid:Shape;
		private var _scrollpane:ScrollPane;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SystemWindowDolmens</code>.		 */		public function SystemWindowDolmens() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the height of the component.		 */		override public function get height():Number {			return Math.max(_scrollpane.y + _scrollpane.height, _grid.y + _grid.height);		}						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Populates the component.		 */		public function populate(data:Vector.<MapEntry>, playerPos:Point3D):void {			if(data == null || playerPos == null) return;			_playerPos = playerPos;			_data = data;			var label:String = Label.getLabel("dolmenSysWinNearest");			var list:String = "<ul>";			var i:int, len:int, dist:int, isDolmen:Boolean, entry:MapEntry;			len = _data.length;			dist = _distStepper.value;			_grid.graphics.clear();			_grid.graphics.beginBitmapFill(_pattern);			_grid.graphics.drawRect(0, 0, dist * 12 + 7, dist * 12 + 7);						for(i = 0; i < len; ++i) {
				entry = _data[i];
				if(parseInt(entry.rawData.@cons) + parseInt(entry.rawData.@pros) < 0) continue;
				if(Math.abs(playerPos.x - entry.x) <= dist && Math.abs(playerPos.y - entry.y) <= dist) {					if(!SharedObjectManager.getInstance().isDolmenTouched(new Point(entry.x, entry.y))) {						list += "<li>["+entry.x+"]["+entry.y+"]";						list += "    <a href=\"event:"+entry.x+";"+entry.y+"\" class=\"link\">Déjà touché</a> ";						list += "</li>";						isDolmen = true;						_grid.graphics.beginFill(0x222222, 1);						_grid.graphics.drawRect((entry.x - _playerPos.x + dist) * 6 + 1, (entry.y - _playerPos.y + dist) * 6 + 1, 5, 5);					}else{						_grid.graphics.beginFill(0xffffff, 1);						_grid.graphics.drawRect((entry.x - _playerPos.x + dist) * 6 + 1, (entry.y - _playerPos.y + dist) * 6 + 1, 5, 5);					}				}			}						_grid.graphics.beginFill(0x990000, 1);			_grid.graphics.drawRect(dist * 6 + 1, dist * 6 + 1, 5, 5);						list += "</ul>";			if(!isDolmen) {				list = "<p align='center'>"+Label.getLabel("dolmenSysWinNearestNone")+"</p>";			}			label = label.replace(/\$\{list\}/gi, list);			_label.text = label;			computePositions();		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			var src:MapIconMapPattern = new MapIconMapPattern();			src.setImageByZoomLevel(2);			_pattern = new BitmapData(src.width, src.height, true, 0);			_pattern.draw(src);						_grid			= addChild(new Shape()) as Shape;			_icon			= addChild(new DolmenIcon()) as DolmenIcon;			_distLabel		= addChild(new CssTextField("sysWindowContent")) as CssTextField;			_label			= new ScrollableTextField("", "sysWindowMessage");			_scrollpane		= addChild(new ScrollPane(_label, new KubeScrollbar())) as ScrollPane;			_distStepper	= addChild(new KubeNumericStepper(2, 20, 1)) as KubeNumericStepper;						_scrollpane.autoHideScrollers = true;			_distStepper.value = 10;			_distLabel.text = Label.getLabel("dolmenSysWinStepper");						_distStepper.addEventListener(Event.CHANGE, changeStepperHandler);			_label.addEventListener(TextEvent.LINK, clickLinkHandler);			setTimeout(addListener, 50);		}				/**		 * Adds the listener to the DolmenData.<br>		 * <br>		 * This is weird I know, but it prevents from infinit loops.		 * The DolmenData singleton instanciate this class in its initialization		 * so if this class does reference to the singleton, the singleton will		 * initialize itself again as the "_instance" value will not be defined		 * yet, and so it will instanciate this class again that will initialize		 * the singleton again...and again and again...<br>		 * <br>		 * There is probably a better solution than this dirty timeout but i'm		 * probably tooooo much tired to see it for now....		 */		private function addListener():void {			DolmenData.getInstance().addEventListener(DolmenMapDataEvent.DOLMEN_TOUCHED, dolmenTouchedHandler);
		}		/**		 * Called when numeri stepper's value changes.		 */		private function changeStepperHandler(event:Event):void {			refresh();
		}

		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_label.autoSize = TextFieldAutoSize.LEFT;			_label.wordWrap = false;			var bounds:Rectangle = TextBounds.getBounds(_label);			_label.autoSize = TextFieldAutoSize.NONE;						_distLabel.x	= Math.round(_icon.width + 10);			_distLabel.y	= Math.round((_distStepper.height - _distLabel.height) * .5);			_distStepper.x	= Math.round(_distLabel.x + _distLabel.width + 10);						_scrollpane.x	= _distLabel.x;			_scrollpane.y	= Math.round(_distStepper.y + _distStepper.height + 30);			_scrollpane.width = bounds.width + 20;			_scrollpane.height = Math.min(bounds.height + 10, 400);			_scrollpane.validate(); 						_grid.x			= Math.round(_scrollpane.x + _scrollpane.width + 20);			_grid.y			= Math.round(_scrollpane.y);						dispatchEvent(new Event(Event.RESIZE));		}				/**		 * Called when a link is clicked.		 */		private function clickLinkHandler(event:TextEvent):void {			var chunks:Array = event.text.split(";");			var pos:Point3D = new Point3D(parseInt(chunks[0]), parseInt(chunks[1]));			SharedObjectManager.getInstance().flagDolmenAsTouched(pos);			refresh();		}				/**		 * Refreshes the view.		 */		private function refresh():void {			populate(_data, _playerPos);
		}
		/**		 * Called when a dolmen is touched.		 */		private function dolmenTouchedHandler(event:DolmenMapDataEvent):void {			refresh();		}	}}