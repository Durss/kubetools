package com.muxxu.kube.components.map {	import flash.filters.DropShadowFilter;
	import gs.TweenLite;	import gs.TweenMax;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.form.ZoneInput;	import com.muxxu.kube.views.Background;	import com.nurun.components.form.events.FormComponentEvent;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.environnement.label.Label;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * 	 * @author Francois	 */	public class GotoForm extends Sprite {				private var _background:Background;
		private var _input:ZoneInput;
		private var _submit:KubeButton;		private var _map:MapEngine;
		private var _holder:Sprite;
		private var _mask:Shape;
		private var _infos:CssTextField;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GotoForm</code>.		 */		public function GotoForm(map:MapEngine) {			_map = map;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_background	= addChild(new Background()) as Background;			_holder		= addChild(new Sprite()) as Sprite;			_mask		= addChild(new Shape()) as Shape;			_input		= _holder.addChild(new ZoneInput()) as ZoneInput;			_submit		= _holder.addChild(new KubeButton(Label.getLabel("mapEngineGotoSubmit"))) as KubeButton;			_infos		= addChild(new CssTextField("windowTitle")) as CssTextField;						_infos.text	= Label.getLabel("mapEngineGotoOpenTxt");			_holder.mask= _mask;			_holder.alpha = 0;						_mask.graphics.beginFill(0xff0000, 1);			_mask.graphics.drawRect(0, 0, 100, 100);			_mask.graphics.endFill();			filters = [new DropShadowFilter(4,45,0,.35,4,4,1,3)];						_input.tabIndex = 1;			_submit.tabIndex = 2;						_submit.addEventListener(MouseEvent.CLICK, submitHandler);			_input.addEventListener(FormComponentEvent.SUBMIT, submitHandler);			addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);			addEventListener(MouseEvent.ROLL_OUT, rollOutHandler);			addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);						computePositions();			_background.height = Math.round(_submit.y + _submit.height + 5);			_infos.x = 5;			_infos.y = Math.round((_background.height - _infos.height) * .5) - 1;			_background.width = Math.round(_infos.x + _infos.width + 5);			_mask.width = _background.width;			_background.scrollRect = new Rectangle(0, 0, _background.width - 1, _background.height - 1);		}
				/**		 * Called when the component losses the focus.		 */		private function focusOutHandler(event:FocusEvent):void {			rollOutHandler(null);
		}
				/**		 * Called when the component receives the focus		 */		private function focusInHandler(event:FocusEvent):void {			rollOverHandler(null);
		}
		/**		 * Called when the form is submitted.		 */		private function submitHandler(event:Event):void {			if(isNaN(_input.xValue) || isNaN(_input.yValue)) return;			_map.centerOn(new Point(_input.xValue, _input.yValue));
		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_input.y = 5;			_input.x = 5;			_input.width = 200;						_submit.x = Math.round(_input.x + _input.width + 5);			_submit.y = _input.y;			_submit.height = _input.height;		}				private function rollOverHandler(event:MouseEvent):void {			_holder.alpha = 1;			_infos.visible = false;			var w:int = Math.round(_submit.x + _submit.width + 5);			TweenMax.to(_background, .35, {width:w, onUpdate:updateScrollRect});			TweenLite.to(_mask, .5, {width:w});		}		/**		 * Called when the component is rolled out.		 */		private function rollOutHandler(event:MouseEvent):void {			_holder.alpha = 0;			_infos.visible = true;			var w:int = Math.round(_infos.x + _infos.width + 5);			TweenMax.to(_background, .35, {width:w, onUpdate:updateScrollRect});			TweenLite.to(_mask, .5, {width:w});		}		private function updateScrollRect():void {			_background.scrollRect = new Rectangle(0, 0, _background.width - 1, _background.height - 1);
		}
	}}