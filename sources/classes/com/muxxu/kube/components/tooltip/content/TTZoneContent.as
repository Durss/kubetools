package com.muxxu.kube.components.tooltip.content {	import gs.TweenLite;	import com.muxxu.kube.components.LoaderSpinning;	import com.muxxu.kube.components.button.KubeButton;	import com.muxxu.kube.components.map.MapEntry;	import com.muxxu.kube.crypto.RequestEncrypter;	import com.muxxu.kube.data.DolmenData;	import com.muxxu.kube.data.SharedObjectManager;	import com.muxxu.kube.graphics.ThumbDownIcon;	import com.muxxu.kube.graphics.ThumbUpIcon;	import com.muxxu.kube.graphics.TouchDolmenIcon;	import com.muxxu.kube.utils.HTTPPath;	import com.muxxu.kube.views.dolmens.entries.DolmenEntry;	import com.muxxu.kube.vo.Point3D;	import com.nurun.components.button.BaseButton;	import com.nurun.components.button.IconAlign;	import com.nurun.components.button.visitors.CssVisitor;	import com.nurun.components.button.visitors.FrameVisitor;	import com.nurun.components.text.CssTextField;	import com.nurun.core.lang.Disposable;	import com.nurun.structure.environnement.label.Label;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	/**	 * 	 * @author  Francois	 */	public class TTZoneContent extends Sprite implements ToolTipContent, Disposable {		private var _canBedisposed:Boolean;		private var _tf:CssTextField;
		private var _ok:BaseButton;
		private var _no:BaseButton;
		private var _thumbsCtn:Sprite;
		private var _loaderVote:URLLoader;		private var _loaderRemove:URLLoader;
		private var _dolmenY:int;
		private var _dolmenX:int;
		private var _spin:LoaderSpinning;
		private var _pros:int;		private var _cons:int;		private var _data:MapEntry;
		private var _removeBt:KubeButton;
		private var _isInteractive:Boolean;
		private var _touchedBt:BaseButton;
										/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TTZoneContent</code>.		 */		public function TTZoneContent(canBedisposed:Boolean = true) {			_canBedisposed = canBedisposed;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets if the content is interactive or not.		 */		public function get isInteractive():Boolean { return _isInteractive; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Populates the content		 */		public function populate(x:int, y:int, data:MapEntry):void {			_data = data;			_dolmenX = x;			_dolmenY = y;			_tf.text = Label.getLabel("dolmensZoneCoords").replace(/\$\{x\}/gi, x).replace(/\$\{y\}/gi, y);
			if(contains(_touchedBt)) {
				_thumbsCtn.removeChild(_touchedBt);
			}			if(data != null && data.icon is DolmenEntry) {				if(data.rawData.@h == "1") {					_tf.text += "<br /><p align='center'><font size='10'><i>-masqué-</i></font></p>";				}				_cons = parseInt(data.rawData.@cons);				_pros = parseInt(data.rawData.@pros);				_ok.label = _pros.toString();				_no.label = _cons.toString();//				if(data.rawData.@u == SharedObjectManager.getInstance().userId) {				if (SharedObjectManager.getInstance().userId != "-1") {//Enable everybody connected to delete dolmens					_thumbsCtn.addChild(_removeBt);				}else if(_thumbsCtn.contains(_removeBt)) {					_thumbsCtn.removeChild(_removeBt);				}
				if(!SharedObjectManager.getInstance().isDolmenTouched(new Point(data.x, data.y))) {
					_thumbsCtn.addChild(_touchedBt);
				}
				_isInteractive = true;				addChild(_thumbsCtn);			}else if(contains(_thumbsCtn)) {				removeChild(_thumbsCtn);				_isInteractive = false;			}			if(data != null && data.rawData != null && data.rawData.child("message") != undefined) {				_tf.text += "<br /><br /><i>« "+data.rawData.child("message")+" »</i>";			}			computePositions();		}				/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			if(_canBedisposed){				_tf.text = "";				while(numChildren > 0){ removeChildAt(0); }					_tf = null;			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize():void {			_loaderVote	= new URLLoader();			_loaderRemove = new URLLoader();			_tf			= addChild(new CssTextField("tooltipContent")) as CssTextField;			_thumbsCtn	= addChild(new Sprite()) as Sprite;			_ok			= _thumbsCtn.addChild(new BaseButton("", "tooltipContent", null, new ThumbUpIcon())) as BaseButton;			_no			= _thumbsCtn.addChild(new BaseButton("", "tooltipContent", null, new ThumbDownIcon())) as BaseButton;			_removeBt	= _thumbsCtn.addChild(new KubeButton(Label.getLabel("dolmensZoneDelete"))) as KubeButton;			_touchedBt	= _thumbsCtn.addChild(new BaseButton(Label.getLabel("dolmensZoneTouched"), "dolmenMapFlagAsTouched", null, new TouchDolmenIcon())) as BaseButton;			_spin		= new LoaderSpinning();
			
			_spin.alpha = 0;			_ok.enabled = _no.enabled = false;			_ok.alpha = _no.alpha = .25;						var fv:FrameVisitor = new FrameVisitor();			fv.addTarget(_ok.icon as MovieClip);			_ok.accept(fv);			_ok.accept(new CssVisitor());			_ok.iconAlign = IconAlign.LEFT;						fv = new FrameVisitor();			fv.addTarget(_no.icon as MovieClip);			_no.accept(fv);			_no.accept(new CssVisitor());			_no.iconAlign = IconAlign.LEFT;						fv = new FrameVisitor();
			fv.addTarget(_touchedBt.icon as MovieClip);
			_touchedBt.accept(fv);			_touchedBt.accept(new CssVisitor());			_touchedBt.iconAlign = IconAlign.LEFT;
			_touchedBt.iconSpacing = 2;						addEventListener(MouseEvent.CLICK, clickHandler);			_loaderVote.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loaderVote.addEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);			_loaderRemove.addEventListener(Event.COMPLETE, loadRemoveCompleteHandler);			_loaderRemove.addEventListener(IOErrorEvent.IO_ERROR, loadRemoveErrorHandler);		}
		/**		 * Resizes and replaces the elements.		 */		private function computePositions():void {			var minX:int;			_ok.x = 0;
			_no.x = Math.round(_ok.width + 10);
			_touchedBt.y = Math.round(_no.height + 4);
			_touchedBt.x = Math.round((_no.x + _no.width - _touchedBt.width) * .5);
						_removeBt.x = Math.round((_no.x + _no.width - _removeBt.width) * .5);			if(_thumbsCtn.contains(_touchedBt)) {
				_removeBt.y = Math.round(_touchedBt.y + _touchedBt.height + 4);				minX = Math.min(_ok.x, _touchedBt.x, _removeBt.x);			}else{				_removeBt.y = Math.round(_no.y + _no.height + 4);				minX = Math.min(_ok.x, _removeBt.x);
			}

			_ok.x -= minX;
			_no.x -= minX;
			_touchedBt.x -= minX;			_removeBt.x -= minX;			_thumbsCtn.y = Math.round(_tf.height + 5);			_tf.wordWrap = false;			if(_tf.width > 400){				_tf.width = 400;				_tf.wordWrap = true;			}			if(_tf.width > _thumbsCtn.width) {				_tf.x = 0;				_thumbsCtn.x = Math.round((_tf.width - _thumbsCtn.width) * .5);			}else{				_thumbsCtn.x = 0;				_tf.x = Math.round((_thumbsCtn.width - _tf.width) * .5);			}			_spin.x = Math.round(_thumbsCtn.x + _thumbsCtn.width * .5);			_spin.y = Math.round((_thumbsCtn.y + _thumbsCtn.height) * .5);			dispatchEvent(new Event(Event.RESIZE));		}				/**		 * Called when a button is clicked.		 */		private function clickHandler(event:MouseEvent):void {
			var target:DisplayObject = event.target as BaseButton;
			if(target != _ok && target != _no && target != _removeBt && target != _touchedBt) return;						var request:URLRequest;			var vars:URLVariables = new URLVariables();			vars.x = _dolmenX;			vars.y = _dolmenY;			vars.uid = SharedObjectManager.getInstance().userIdCrp;						if(target == _removeBt) {				request = new URLRequest(HTTPPath.getPath("delDolmen"));				request.method = URLRequestMethod.POST;				request.data = RequestEncrypter.encrypt(vars);				_loaderRemove.load(request);
			} else if(target == _ok || target == _no) {				request = new URLRequest(HTTPPath.getPath("voteDolmen"));				request.method = URLRequestMethod.POST;								if(target == _ok){					vars.pro = 1;					_pros ++;				}				if(target == _no){					vars.con = 1;					_cons ++;				}								request.data = RequestEncrypter.encrypt(vars);								_thumbsCtn.mouseEnabled = false;								_spin.open();				_loaderVote.load(request);			} else if(target == _touchedBt) {
				SharedObjectManager.getInstance().flagDolmenAsTouched(new Point3D(_data.x, _data.y));
				DolmenEntry(_data.icon).updateTouchedState();
				DolmenData.getInstance().updateMap();
				dispatchEvent(new Event(Event.CLOSE));
				return;
			}			TweenLite.killTweensOf(_thumbsCtn);			TweenLite.to(_thumbsCtn, .2, {alpha:.25});			addChild(_spin);		}				/**		 * Called when vote loading completes.		 */		private function loadCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error){				resultCode = 100;			}			if(resultCode > 3 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				_tf.text = Label.getLabel("dolmenVoteSuccess");			} else{				_tf.text = Label.getLabel("dolmenVoteServerError" + resultCode);			}			_ok.label = _pros.toString();			_no.label = _cons.toString();			if(_data != null && _data.rawData != null) {				_data.rawData.@pros = _pros;				_data.rawData.@cons = _cons;			}			_spin.close();			_thumbsCtn.mouseEnabled = true;			TweenLite.killTweensOf(_thumbsCtn);			TweenLite.to(_thumbsCtn, .2, {alpha:1});			removeChild(_spin);			computePositions();		}		/**		 * Called if vote loading fails.		 */		private function loadErrorHandler(event:IOErrorEvent):void {			_tf.text = Label.getLabel("dolmenVoteServerError101");			_thumbsCtn.mouseEnabled = true;			_spin.close();			TweenLite.killTweensOf(_thumbsCtn);			TweenLite.to(_thumbsCtn, .2, {alpha:1});			removeChild(_spin);			computePositions();		}				/**		 * Called when a dolmen removing completes.		 */		private function loadRemoveCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error){				resultCode = 100;			}			if(resultCode > 3 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				_tf.text = Label.getLabel("dolmenDelSuccess");			} else{				_tf.text = Label.getLabel("dolmenDelServerError" + resultCode);			}			if(contains(_thumbsCtn)) {				removeChild(_thumbsCtn);			}			TweenLite.killTweensOf(_thumbsCtn);			_thumbsCtn.alpha = 1;			_spin.close();			removeChild(_spin);			computePositions();						DolmenData.getInstance().getDolmens();		}				/**		 * Called if dolmen removing fails.		 */		private function loadRemoveErrorHandler(event:IOErrorEvent):void {			_tf.text = Label.getLabel("dolmenDelServerError101");			_thumbsCtn.mouseEnabled = true;			_spin.close();			TweenLite.killTweensOf(_thumbsCtn);			TweenLite.to(_thumbsCtn, .2, {alpha:1});			removeChild(_spin);			computePositions();		}	}}