package com.muxxu.kube.components.tooltip.content {	import gs.TweenLite;	import gs.easing.Linear;	import com.muxxu.kube.graphics.TimeCircle;	import flash.events.Event;	import flash.events.IOErrorEvent;	/**	 * Content that displays a landscape image with a timer that enlarges the image.	 * 	 * @author  Francois	 */	public class TTLandScapeContent extends TTImageContent {		private var _timeCircle:TimeCircle;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TTLandScapeContent</code>.		 */		public function TTLandScapeContent(imgUrl:String, ratio:Number = 1) {			super(imgUrl, ratio);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		override public function dispose():void {			TweenLite.killTweensOf(_timeCircle);			super.dispose();				}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize():void {			super.initialize();			if(_ratio < 1){				_timeCircle = new TimeCircle();				_timeCircle.scaleX = .8;				_timeCircle.scaleY = .8;				_timeCircle.stop();				_timeCircle.visible = false;			}		}		/**		 * Called when loading completes.		 */		override protected function loadCompleteHandler(e:Event):void {			super.loadCompleteHandler(e);			addChild(_timeCircle);			_timeCircle.visible = true;			TweenLite.to(_timeCircle, 1, {frame:_timeCircle.totalFrames, ease:Linear.easeNone, delay:.5, onComplete:onEnlarge});		}		/**		 * Called if loading fails.		 */		override protected function loadErrorHandler(e:IOErrorEvent):void {			super.loadErrorHandler(e);			_timeCircle.visible = false;		}				/**		 * Called when the time circle is full		 */		protected function onEnlarge():void {			TweenLite.to(_loader, .5, {scaleX:1, scaleY:1, onUpdate:computePositions});			TweenLite.to(_timeCircle, 1, {autoAlpha:0});		}				/**		 * Replaces and resizes the elements.		 */		override protected function computePositions():void {			_timeCircle.x	= _loader.width - 20 * _timeCircle.scaleX - 3;			_timeCircle.y	= _loader.height - 20 * _timeCircle.scaleY - 3;			super.computePositions();		}	}}