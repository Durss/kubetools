package com.muxxu.kube.components.form {	import com.muxxu.kube.graphics.scrollbar.ScrollbarDownBtSkin;	import com.muxxu.kube.graphics.scrollbar.ScrollbarUpBtSkin;	import com.nurun.components.button.GraphicButton;	import com.nurun.components.button.events.NurunButtonEvent;	import com.nurun.components.button.visitors.FrameVisitor;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.ui.Keyboard;	import flash.utils.Timer;	/**	 * Displays a numeric stepper	 * 	 * @author  Francois	 */	public class KubeNumericStepper extends Sprite {		private var _up:GraphicButton;		private var _down:GraphicButton;		private var _input:KubeInput;		private var _min:int;		private var _max:int;		private var _step:int;		private var _incrementTimer:Timer;		private var _value:int;		private var _incDirection:int;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>KubeNumericStepper</code>.		 */		public function KubeNumericStepper(min:int, max:int, step:int) {			_step = step;			_max = max;			_min = min;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */				/**		 * Gets the current value.		 */		public function get value():int { return _value; }				/**		 * Sets the current value.		 */		public function set value(value:int):void {			_value = Math.min(_max, Math.max(_min, value));			_input.text = _value.toString();		}				/**		 * Sets the input's width.		 */		public function set inputWidth(value:int):void {			_input.width = value;			computePositions();		}						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_up		= addChild(new GraphicButton(new ScrollbarUpBtSkin())) as GraphicButton;			_down	= addChild(new GraphicButton(new ScrollbarDownBtSkin())) as GraphicButton;			_input	= addChild(new KubeInput()) as KubeInput;						var fv:FrameVisitor = new FrameVisitor();			fv.addTarget(_up.background as MovieClip);			_up.accept(fv);			fv = new FrameVisitor();			fv.addTarget(_down.background as MovieClip);			_down.accept(fv);						value			= 0;			_input.style	= "numericStepper";			_input.width	= 40;						_incrementTimer = new Timer(100);			_incrementTimer.addEventListener(TimerEvent.TIMER, ticTimerHandler);						_up.addEventListener(NurunButtonEvent.PRESS,				mouseDownHandler);			_down.addEventListener(NurunButtonEvent.PRESS,				mouseDownHandler);			_up.addEventListener(NurunButtonEvent.RELEASE,				mouseUpHandler);			_up.addEventListener(NurunButtonEvent.RELEASE_OUTSIDE,		mouseUpHandler);			_down.addEventListener(NurunButtonEvent.RELEASE,			mouseUpHandler);			_down.addEventListener(NurunButtonEvent.RELEASE_OUTSIDE,	mouseUpHandler);			_input.textfield.addEventListener(Event.CHANGE,				changeTextHandler);			_input.textfield.addEventListener(KeyboardEvent.KEY_DOWN,	keyDownHandler);			_input.textfield.addEventListener(MouseEvent.MOUSE_WHEEL,	mouseWheelHandler);						computePositions();		}		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_up.x	= _input.width;			_down.x	= _input.width;			_down.y	= _up.height - 1;			_input.y= Math.round((_down.y + _down.height - _input.height) * .5);		}				/**		 * Called when a button is released.		 */		private function mouseUpHandler(e:NurunButtonEvent):void {			_incrementTimer.stop();		}		/**		 * Called when a button is pressed.		 */		private function mouseDownHandler(e:NurunButtonEvent):void {			_incrementTimer.start();			_incDirection = (e.currentTarget == _up)? 1 : -1;			ticTimerHandler();		}		/**		 * Called on timer's tic to change the input's not value too fast while an arrow is kept pressed.		 */		private function ticTimerHandler(event:TimerEvent = null):void {			value += _step * _incDirection;			dispatchEvent(new Event(Event.CHANGE));		}				/**		 * Called when the input's content changes.		 */		private function changeTextHandler(e:Event):void {			value = parseInt(_input.text);			dispatchEvent(new Event(Event.CHANGE));		}				/**		 * Called when a key is pressed inside the input's textfield.		 */		private function keyDownHandler(e:KeyboardEvent):void {			var oldValue:int = value;			if(e.keyCode == Keyboard.UP) {				value += _step;			}else if(e.keyCode == Keyboard.DOWN){				value -= _step;			}			if(value != oldValue){				dispatchEvent(new Event(Event.CHANGE));			}		}				/**		 * Called when the mouse wheel is used.		 */		private function mouseWheelHandler(e:MouseEvent):void {			var oldValue:int = value;			if(e.delta > 0){				value ++;			}else{				value --;			}			if(value != oldValue){				dispatchEvent(new Event(Event.CHANGE));			}			e.stopPropagation();		}	}}