package com.muxxu.kube.components.form {	import com.nurun.structure.environnement.label.Label;
	import flash.events.Event;
	import com.nurun.components.form.events.FormComponentEvent;	import flash.display.Sprite;	/**	 * Creates two input	 * 	 * @author  Francois	 */	public class ZoneInput extends Sprite {		private var _inputX:KubeInput;		private var _inputY:KubeInput;		private var _width:Number;		private var _canHide:Boolean;		private var _hide:KubeCheckBox;
								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>ZoneInput</code>.		 */		public function ZoneInput(canHide:Boolean = false) {			_canHide = canHide;			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the component's width without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Gets the width of the component.		 */		override public function get width():Number { return _width; }				/**		 * Gets the X value.		 */		public function get xValue():Number {			if(_canHide && _hide.selected) {				return int.MAX_VALUE;			} else{				return parseInt(_inputX.text);			}		}				/**		 * Gets the Y value.		 */		public function get yValue():Number {			if(_canHide && _hide.selected) {				return int.MAX_VALUE;			} else{				return parseInt(_inputY.text);			}		}				/**		 * Sets the component's tab focus index.		 */		override public function set tabIndex(value:int):void {			_inputX.tabIndex = _inputY.tabIndex = value;			if(_canHide) _hide.tabIndex = value;		}								/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_inputX	= addChild(new KubeInput("x")) as KubeInput;			_inputY	= addChild(new KubeInput("y")) as KubeInput;			if(_canHide){				_hide	= addChild(new KubeCheckBox(Label.getLabel("galleryFormZoneHideLabel"))) as KubeCheckBox;			}						_inputX.textfield.restrict = "[0-9]\\-";			_inputY.textfield.restrict = "[0-9]\\-";						if(_canHide) _hide.addEventListener(Event.CHANGE,		changeHideStateHandler);			_inputX.addEventListener(FormComponentEvent.SUBMIT,		dispatchEvent);			_inputY.addEventListener(FormComponentEvent.SUBMIT,		dispatchEvent);		}
		/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var availW:int	= _canHide? _width - _hide.width - 30 : _width - 10;			var inputW:int	= availW * .5;			_inputX.width	= inputW;			_inputY.width	= inputW;			_inputY.x		= Math.round(_inputX.x + inputW + 10);			if(_canHide) {				_hide.x		= Math.round(_inputY.x + inputW + 20);				_hide.y		= Math.round((_inputY.height - _hide.height) * .5);			}		}		/**		 * Called when hide checkbox state changes.		 */		private function changeHideStateHandler(event:Event):void {			_inputX.enabled = _inputY.enabled = !_hide.selected;		}	}}