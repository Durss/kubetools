package com.muxxu.kube.controler {	import com.muxxu.kube.events.PopinErrorEvent;	import com.muxxu.kube.model.Model;	import com.muxxu.kube.vo.Texture;	import com.muxxu.kube.vo.ToolTipMessage;	import com.nurun.structure.mvc.views.ViewLocator;	import flash.display.BitmapData;	import flash.errors.IllegalOperationError;	import flash.utils.ByteArray;	/**	 * Singleton FrontControler	 * 	 * @author Francois	 */	public class FrontControler {				private static var _instance:FrontControler;		private var _model:Model;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>FrontControler</code>.<br>		 */		public function FrontControler(enforcer:SingletonEnforcer) {			if(enforcer == null) throw new IllegalOperationError("A singleton cannot be instanciated!");		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():FrontControler {			if(_instance == null)_instance = new  FrontControler(new SingletonEnforcer());			return _instance;			}				/**		 * Defines the view ID to get displayed.		 */		public function set viewId(value:String):void { _model.currentViewId = value; }				/**		 * Defines the texture type to use.<br>		 * <br>		 * Used by the <code>TextureSelector</code> to tell the <code>Generator</code>		 * which kind of texture using.		 */		public function set texture(value:Texture):void { _model.currentTexture = value; }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Initialize the class.		 */		public function initialise(model:Model):void {			_model = model;		}				/**		 * Sends a generic message ID to the views.		 */		public function sendMessage(value:String):void {			_model.sendMessage(value);		}				/**		 * Open a browse window to load an image.		 */		public function browseForImage():void {			_model.browseForImage();		}				/**		 * Sets the BitmapData to draw on the generator's grid.		 */		public function setBitmapDataToDraw(bmd:BitmapData):void {			_model.setBitmapDataToDraw(bmd);		}				/**		 * Changes the flatten ratio.		 */		public function changeColorsMax(nbr:int):void {			_model.changeColorsMax(nbr);		}				/**		 * Sets the image's editor content.		 */		public function setImageEditorContent(bmd:BitmapData):void {			_model.setImageEditorContent(bmd);		}				/**		 * Saves an image to an external file.		 */		public function saveImage(data:ByteArray):void {			_model.saveImage(data);		}				/**		 * Loads an image from an external file.		 */		public function loadImage():void {			_model.loadImage();		}		/**		 * Opens the tooltip.		 */		public function openToolTip(message:ToolTipMessage):void {			_model.openToolTip(message);		}				/**		 * Displays an application error.		 */		public function error(text:String):void {			ViewLocator.getInstance().dispatchToViews(new PopinErrorEvent(PopinErrorEvent.ERROR, text));		}						/* ******* *		 * PRIVATE *		 * ******* */			}}internal class SingletonEnforcer{}