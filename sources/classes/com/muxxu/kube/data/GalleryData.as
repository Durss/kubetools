package com.muxxu.kube.data {	import com.muxxu.kube.crypto.RequestEncrypter;	import com.muxxu.kube.events.GalleryDataEvent;	import com.muxxu.kube.utils.HTTPPath;	import com.muxxu.kube.vo.GalleryItem;	import com.nurun.structure.environnement.label.Label;	import flash.errors.IllegalOperationError;	import flash.events.DataEvent;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.filesystem.File;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	/**	 * Singleton GalleryData	 * 	 * @author Francois	 */	public class GalleryData extends EventDispatcher {				private static var _instance:GalleryData;		private var _file:File;		private var _urlVars:URLVariables;		private var _loaderItem:URLLoader;		private var _loaderVote:URLLoader;		private var _lastRequest:URLRequest;		private var _lastVoteId:String;		private var _prev:int;		private var _next:int;		private var _currentItems:Vector.<GalleryItem>;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>GalleryData</code>.<br>		 */		public function GalleryData(enforcer:SingletonEnforcer) {			if(enforcer == null) throw new IllegalOperationError("A singleton cannot be instanciated!");			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():GalleryData {			if(_instance == null)_instance = new  GalleryData(new SingletonEnforcer());			return _instance;			}				/**		 * Gets the next page index or -1 if no next item.		 */		public function get nextPage():int { return _next; }				/**		 * Gets the prev page index or -1 if no previous item.		 */		public function get prevPage():int { return _prev; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Adds an image entry to the data base.		 */		public function postEntry(file:File, author:String, name:String, zone:String, type:int):void {			_urlVars		= new URLVariables();			_urlVars.author	= author;			_urlVars.name	= name;			_urlVars.zone	= zone;			_urlVars.type	= type;			_urlVars.uid	= SharedObjectManager.getInstance().userIdCrp;			_file			= file;			_file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteHandler);			_file.addEventListener(IOErrorEvent.IO_ERROR, uploadErrorHandler);			var req:URLRequest = new URLRequest(HTTPPath.getPath("addGalleryItem"));            req.data	= RequestEncrypter.encrypt(_urlVars);			req.method	= URLRequestMethod.POST;			_file.upload(req, "image");		}		/**		 * Loads gallery items.		 * 		 * @param name		image name to search for		 * @param author	author to search for		 * @param zone		image zone to search for		 * @param type		image type(s) to search for (separated by ;)		 * @param start		search start index		 * @param length	total of results max		 */		public function getResults(name:String="", author:String="", zone:String="", type:String="", start:int=0, length:int=30):void {			_lastRequest			= new URLRequest(HTTPPath.getPath("getGalleryItems"));			var vars:URLVariables	= new URLVariables();			vars.offset	= start;			vars.length	= length;			if(name.length > 0)		vars.name		= name;			if(author.length > 0)	vars.author		= author;			if(zone.length > 0)		vars.zone		= zone;			if(type.length > 0)		vars.type		= type;			vars.uid			= SharedObjectManager.getInstance().userIdCrp;			_lastRequest.data	= RequestEncrypter.encrypt(vars);			_lastRequest.method	= URLRequestMethod.POST;			_loaderItem.load(_lastRequest);		}				/**		 * Submits a vote for an entry.		 * 		 * @param note	note (between 0 and 100)		 * @param id	entry id.		 */		public function submitVote(note:int, id:String):void {			_lastVoteId = id;						var request:URLRequest	= new URLRequest(HTTPPath.getPath("galleryVote"));			var vars:URLVariables	= new URLVariables();			vars.id			= id;			vars.note		= note;			vars.uid		= SharedObjectManager.getInstance().userIdCrp;			request.data	= RequestEncrypter.encrypt(vars);			request.method	= URLRequestMethod.POST;			_loaderVote.load(request);		}				/**		 * Enlarges an item.		 * 		 * @param item	item's data to enlarge.		 */		public function enlargeItem(index:int):void {			dispatchEvent(new GalleryDataEvent(GalleryDataEvent.ENLARGE_IMAGE, 0, _currentItems[index]));		}				/**		 * 		 */		public function enlargeNextItem(item:GalleryItem):void {			var i:int, len:int;			len = _currentItems.length;			for(i = 0; i < len; ++i) {				if(_currentItems[i] == item){					enlargeItem(i + 1);					break;				}			}		}				/**		 * 		 */		public function enlargePrevItem(item:GalleryItem):void {			var i:int, len:int;			len = _currentItems.length;			for(i = 0; i < len; ++i) {				if(_currentItems[i] == item){					enlargeItem(i - 1);					break;				}			}		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_loaderItem = new URLLoader();			_loaderItem.addEventListener(Event.COMPLETE,				loadItemsCompleteHandler);			_loaderItem.addEventListener(IOErrorEvent.IO_ERROR,			loadItemsErrorHandler);						_loaderVote = new URLLoader();			_loaderVote.addEventListener(Event.COMPLETE,				loadVoteCompleteHandler);			_loaderVote.addEventListener(IOErrorEvent.IO_ERROR,			loadVoteErrorHandler);		}												//__________________________________________________________ VOTE EVENTS				/**		 * Called when vote submit completes.<br>		 * <br>		 * The server response is an XML with a &lt;result&gt; node containing		 * one of the following codes :<br>		 * <ul><li>0 - success</li>		 * <li>1 - POST var missing</li>		 * <li>2 - SQL error</li>		 * <li>3 - server result bad formated</li></ul>		 */		private function loadVoteCompleteHandler(e:Event):void {			var resultCode:int;			try{				var data:XML = new XML(_loaderVote.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error){				resultCode = 3;			}			if(resultCode > 3) resultCode = 3;			if(resultCode == 0) {				dispatchEvent(new GalleryDataEvent(GalleryDataEvent.VOTE_SUBMITTED));			}else{				SharedObjectManager.getInstance().removeVote(data.child("id")[0]);				dispatchEvent(new GalleryDataEvent(GalleryDataEvent.VOTE_SUBMIT_ERROR, resultCode));			}		}				/**		 * Called if vote submit fails.		 */		private function loadVoteErrorHandler(e:ErrorEvent):void {			dispatchEvent(new GalleryDataEvent(GalleryDataEvent.VOTE_SUBMIT_ERROR, 3));		}												//__________________________________________________________ FILE EVENTS				/**		 * Called when upload completes.<br>		 * <br>		 * The server response is an XML with a &lt;result&gt; node containing		 * one of the following codes :<br>		 * <ul><li>0 - success</li>		 * <li>1 - file size higher than the limit</li>		 * <li>2 - file not found</li>		 * <li>3 - wrong file type</li>		 * <li>4 - copy error</li>		 * <li>5 - SQL error</li>		 * <li>6 - similar entry exiting</li>		 * <li>7 - ressampling failed</li>		 * <li>8 - image too large (800x600 max)</li>		 * <li>9 - icon creation failure</li>		 * <li>100 - server result bad formated</li>		 * <li>101 - no network</li></ul>		 */		private function uploadCompleteHandler(e:DataEvent):void {			_file.removeEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteHandler);			var resultCode:int;			try{				var data:XML = new XML(e.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error){				resultCode = 100;			}			if(resultCode > 9 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				dispatchEvent(new GalleryDataEvent(GalleryDataEvent.IMAGE_SENT));			}else{				dispatchEvent(new GalleryDataEvent(GalleryDataEvent.IMAGE_SENDING_ERROR, resultCode));			}			_loaderItem.load(_lastRequest);		}				/**		 * Called if image upload fails.		 */		private function uploadErrorHandler(e:IOErrorEvent):void {			dispatchEvent(new GalleryDataEvent(GalleryDataEvent.IMAGE_SENDING_ERROR, 101));		}				/**		 * Called items loading completes.		 */		private function loadItemsCompleteHandler(e:Event):void {			var i:int, len:int, result:XML, items:XMLList, ret:Vector.<GalleryItem>;			try{				result	= new XML(_loaderItem.data);			}catch(error:Error){				dispatchEvent(new GalleryDataEvent(GalleryDataEvent.ITEMS_LOADING_ERROR, 100, Label.getLabel("xmlError")));				return;			}			_next	= (result.child("next") == undefined)? -1 : parseInt(result.child("next"));			_prev	= (result.child("prev") == undefined)? -1 : parseInt(result.child("prev"));			items	= result.child("items").child("item");			len		= items.length();			ret		= new Vector.<GalleryItem>(len, true);			for(i = 0; i < len; ++i) {				ret[i] = new GalleryItem(items[i], i, len);			}			_currentItems = ret;			dispatchEvent(new GalleryDataEvent(GalleryDataEvent.ITEMS_LOADING_SUCCESS, 0, ret));		}				/**		 * Called if items loading fails.		 */		private function loadItemsErrorHandler(e:IOErrorEvent):void {			dispatchEvent(new GalleryDataEvent(GalleryDataEvent.ITEMS_LOADING_ERROR, 101, e.text));		}	}}internal class SingletonEnforcer{}