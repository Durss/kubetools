package com.muxxu.kube.data {	import com.muxxu.kube.vo.Point3D;	import com.muxxu.kube.components.map.MapEntry;	import com.muxxu.kube.components.syswindowcontent.SystemWindowDolmens;	import com.muxxu.kube.crypto.RequestEncrypter;	import com.muxxu.kube.events.DolmenMapDataEvent;	import com.muxxu.kube.events.LocalConnectionManagerEvent;	import com.muxxu.kube.utils.HTTPPath;	import com.muxxu.kube.views.dolmens.entries.DolmenEntry;	import com.muxxu.kube.views.syswindow.SystemWindow;	import com.muxxu.kube.views.syswindow.SystemWindowManager;	import com.muxxu.kube.vo.Dolmen;	import com.nurun.structure.environnement.configuration.Config;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.utils.Dictionary;	import flash.utils.getTimer;	/**	 * Singleton DolmenData	 * 	 * @author Francois	 */	public class DolmenData extends EventDispatcher {				private static var _instance:DolmenData;		private var _loaderToAreas:Dictionary;
		private var _lastArea:Rectangle;
		private var _lastDolmenAdded:Point;
		private var _lastCoords:Point3D;
		private var _window:SystemWindow;
		private var _windowContent:SystemWindowDolmens;
		private var _lastPlayerMove:int;
		private var _dolmens:Vector.<MapEntry>;		private var _radarEnabled:Boolean;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>DolmenData</code>.<br>		 */		public function DolmenData(enforcer:SingletonEnforcer) {			if(enforcer == null) throw new IllegalOperationError("A singleton cannot be instanciated!");			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():DolmenData {			if(_instance == null)_instance = new DolmenData(new SingletonEnforcer());			return _instance;			}				/**		 * Gets the coordinates of the last added dolmen.		 */		public function get lastDolmenAdded():Point { return _lastDolmenAdded; }				/**		 * Sets if the radar is enabled		 */		public function set radarEnabled(radarEnabled:Boolean):void {			_radarEnabled = radarEnabled;			LocalConnectionManager.getInstance().getCurrentZone();		}				/**		 * Asks for map rendering.		 */
		public function updateMap():void {
			dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.UPDATE_MAP));		}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Adds a dolmen to the data base.		 */		public function addDolmens(dolmens:Vector.<Dolmen>):void {			var urlVars:URLVariables	= new URLVariables();			var i:int, len:int;			len = dolmens.length;			for(i = 0; i < len; ++i) {				urlVars["x"+i]	= dolmens[i].x;				urlVars["y"+i]	= dolmens[i].y;				if(dolmens[i].hidden) urlVars["h"+i] = 1;			}			urlVars.uid	= SharedObjectManager.getInstance().userIdCrp;			var req:URLRequest = new URLRequest(HTTPPath.getPath("addDolmens"));            req.data	= RequestEncrypter.encrypt(urlVars);			req.method	= URLRequestMethod.POST;			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, addDolmenCompleteHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR, addDolmenErrorHandler);			loader.load(req);			_lastDolmenAdded = new Point(dolmens[i-1].x, dolmens[i-1].y);		}				/**		 * Adds a dolmen to the data base.		 */		public function addDolmen(x:int, y:int, hidden:Boolean):void {			var dolmen:Vector.<Dolmen> = new Vector.<Dolmen>(1, true);			dolmen[0] = new Dolmen(x, y, hidden);			addDolmens(dolmen);		}				/**		 * Gets the dolmens of a specific area.		 */		public function getDolmens(area:Rectangle = null):void {			_lastArea = (area == null) ? _lastArea : area;			var urlVars:URLVariables	= new URLVariables();			urlVars.xmin	= _lastArea.left;			urlVars.ymin	= _lastArea.top;			urlVars.xmax	= _lastArea.right;			urlVars.ymax	= _lastArea.bottom;			urlVars.uid		= SharedObjectManager.getInstance().userIdCrp;			if(Config.getVariable("isEtnalta") == "true") urlVars.sh = 1;			var req:URLRequest = new URLRequest(HTTPPath.getPath("getDolmens"));            req.data	= RequestEncrypter.encrypt(urlVars);			req.method	= URLRequestMethod.POST;			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, getDolmenCompleteHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR, getDolmenErrorHandler);			loader.load(req);			_loaderToAreas[loader] = _lastArea;
		}
								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_loaderToAreas = new Dictionary();						_window = SystemWindowManager.getInstance().create();			_windowContent = new SystemWindowDolmens();						LocalConnectionManager.getInstance().addEventListener(LocalConnectionManagerEvent.ENTER_ZONE, enterZoneHandler);			LocalConnectionManager.getInstance().addEventListener(LocalConnectionManagerEvent.DOLMEN_TOUCHED, dolmenTouchedHandler);		}		/**		 * Called by the game when the player enters a new zone.		 */		private function enterZoneHandler(event:LocalConnectionManagerEvent):void {			if(!_radarEnabled) return;			_lastPlayerMove = getTimer();			_lastCoords = event.zone;			if(_dolmens != null) {				_windowContent.populate(_dolmens, _lastCoords);				_window.open(_windowContent, "dolmenSystemWindowPos");			}			dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.CENTER_MAP_ON, 0, new Rectangle(_lastCoords.x, _lastCoords.y, 0, 0)));//Dirty Rectangle to pass point data... but fuck for a third param...		}				/**		 * Flags a dolmen as touched.		 */		private function dolmenTouchedHandler(event:LocalConnectionManagerEvent):void {			var i:int, len:int, isOnDolmenZone:Boolean;			if(_dolmens != null) {				len = _dolmens.length;				for(i = 0; i < len; ++i) {					if(_dolmens[i].x == event.zone.x && _dolmens[i].y == event.zone.y) {						isOnDolmenZone = true;						break;					}				}			}			SharedObjectManager.getInstance().flagDolmenAsTouched(event.zone);			dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.DOLMEN_TOUCHED, isOnDolmenZone? 1 : 0, new Rectangle(event.zone.x, event.zone.y, 0, 0)));
		}
										//__________________________________________________________ SERVER EVENTS				/**		 * Called when a dolmen add completes.		 */		private function addDolmenCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error) {				resultCode = 100;			}			if(resultCode > 9 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.ADD_DOLMEN_COMPLETE));			}else{				dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.ADD_DOLMEN_ERROR, resultCode));			}			getDolmens(_lastArea);		}		/**		 * Called if a dolmen add fails.		 */		private function addDolmenErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.ADD_DOLMEN_ERROR, 101));		}				/**		 * Called when dolmens data are received.		 */		private function getDolmenCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error){				resultCode = 100;			}			if(resultCode > 9 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				var i:int, len:int, nodes:XMLList, pos:Point;				nodes = data.child("items").child("item");				len = nodes.length();				_dolmens = new Vector.<MapEntry>();				for(i = 0; i < len; ++i) {					pos = new Point(parseInt(nodes[i].@x), parseInt(nodes[i].@y));					_dolmens[i] = new MapEntry(pos.x, pos.y, new DolmenEntry(nodes[i].@h == "1", pos), nodes[i]);				}				dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.LOAD_DOLMENS_COMPLETE, 0, _loaderToAreas[event.target], _dolmens));			}else{				dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.LOAD_DOLMENS_ERROR, resultCode, _loaderToAreas[event.target]));			}			delete _loaderToAreas[event.target];						if(_lastCoords != null && _radarEnabled) {				_windowContent.populate(_dolmens, _lastCoords);				_window.open(_windowContent, "dolmenSystemWindowPos");			}		}				/**		 * Called if dolmens data loading fails.		 */		private function getDolmenErrorHandler(event:IOErrorEvent):void {			delete _loaderToAreas[event.target];			dispatchEvent(new DolmenMapDataEvent(DolmenMapDataEvent.LOAD_DOLMENS_ERROR, 101, _lastArea));		}	}}internal class SingletonEnforcer{}