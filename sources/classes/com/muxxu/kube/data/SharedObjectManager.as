package com.muxxu.kube.data {	import com.muxxu.kube.vo.Point3D;	import com.muxxu.kube.vo.KPPEntry;
	import flash.utils.ByteArray;
	import flash.data.EncryptedLocalStore;
	import flash.errors.IllegalOperationError;	import flash.geom.Point;	import flash.utils.Dictionary;	/**	 * Singleton SharedObjectManager	 * 	 * @author Francois	 */	public class SharedObjectManager {				public static const CURRENT_DATA_VERSION:int = 2;				private static var _instance:SharedObjectManager;		private var _cache:Dictionary;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SharedObjectManager</code>.<br>		 */		public function SharedObjectManager(enforcer:SingletonEnforcer) {			if(enforcer == null) throw new IllegalOperationError("A singleton cannot be instanciated!");			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():SharedObjectManager {			if(_instance == null)_instance = new  SharedObjectManager(new SingletonEnforcer());			return _instance;			}				/**		 * Sets if the application should be reduced on the traybar.		 */		public function set reduceOnTraybar(value:Boolean):void { setData("systrayReduce", value); }				/**		 * Gets if the application should be reduced on the traybar.		 */		public function get reduceOnTraybar():Boolean { return getData("systrayReduce", true); }						/**		 * Gets the last window's position.		 */		public function get windowPos():Point {			var values:Array =  getData("windowPos", [-1, -1]);			return new Point(values[0], values[1]);		}				/**		 * Sets the last window's position.		 */		public function set windowPos(value:Point):void { setData("windowPos", [value.x, value.y]); }						/**		 * Gets the current data version.		 */		public function get dataVersion():int { return getData("dataVersion", 0); }				/**		 * Sets the current data version.		 */		public function set dataVersion(value:int):void { setData("dataVersion", value); }						/**		 * Gets if the window should be always on top.		 */		public function get alwaysInFront():Boolean { return getData("alwaysInFront", true); }				/**		 * Sets if the window should be always on top.		 */		public function set alwaysInFront(value:Boolean):void { setData("alwaysInFront", value); }						/**		 * Gets if the application should start at system startup.		 */		public function get startupExecute():Boolean { return getData("startupExecute", false); }				/**		 * Sets if the application should start at system startup.		 */		public function set startupExecute(value:Boolean):void { setData("startupExecute", value); }						/**		 * Gets the bag's size.		 */		public function get bagSize():int { return getData("bagSize", 10); }				/**		 * Sets the bag's size.		 */		public function set bagSize(value:int):void { setData("bagSize", value); }						/**		 * Gets the user's ID.		 */		public function get userId():String { return getData("userId", null); }				/**		 * Gets the crypted user's ID.		 */		public function get userIdCrp():int { return (parseInt(userId) * 12) + 45; }				/**		 * Sets the user's ID.		 */		public function set userId(value:String):void { setData("userId", value); }						/**		 * Gets if the user is authenticated.		 */		public function get authenticated():Boolean { return getData("auth", false); }				/**		 * Sets if the user is authenticated		 */		public function set authenticated(value:Boolean):void { setData("auth", value); }						/**		 * Gets the user's public key.		 */		public function get pubKey():String { return getData("pubkey", null); }				/**		 * Sets the user's public key.		 */		public function set pubKey(value:String):void { setData("pubkey", value); }						/**		 * Gets the user's name.		 */		public function get userName():String { return getData("userName", null); }				/**		 * Sets the user's name.		 */		public function set userName(value:String):void { setData("userName", value); }						/**		 * Gets the user's gender.		 */		public function get userGender():String { return getData("userGender", null); }				/**		 * Sets the user's gender.		 */		public function set userGender(value:String):void { setData("userGender", value); }						/**		 * Gets the user's avatar.		 */		public function get userAvatar():String { return getData("userAvatar", null); }				/**		 * Sets the user's avatar.		 */		public function set userAvatar(value:String):void { setData("userAvatar", value); }						/**		 * Gets the user's points.		 */		public function get userPoints():int { return getData("userPoints", 0); }				/**		 * Sets the user's points.		 */		public function set userPoints(value:int):void { setData("userPoints", value); }						/**		 * Gets the user's zones.		 */		public function get userZones():int { return getData("userZones", 0); }				/**		 * Sets the user's zones.		 */		public function set userZones(value:int):void { setData("userZones", value); }						/**		 * Gets the local/online mode state.		 */		public function get localMode():Boolean { return getData("isLocal", false); }				/**		 * Sets the local/online mode.		 */		public function set localMode(value:Boolean):void { setData("isLocal", value); }						/**		 * Gets if the user is an atlante		 */		public function get isEtnalta():Boolean { return getData("isEtnalta", null); }				/**		 * Sets if the user is an atlante		 */		public function set isEtnalta(value:Boolean):void { setData("isEtnalta", value); }						/**		 * Gets if the user is a kube master		 */		public function get isKm():Boolean { return getData("isKm", null); }				/**		 * Sets if the user is a kube master		 */		public function set isKm(value:Boolean):void { setData("isKm", value); }						/**		 * Gets the atlantiser encrypt key.		 * 		 * Not used anymore. Still here for retro-compatibility		 */		public function get encryptKey():String { return getData("encryptKey", ""); }				/**		 * Sets the atlantiser encrypt key.		 * 		 * Not used anymore. Still here for retro-compatibility		 */		public function set encryptKey(value:String):void { setData("encryptKey", value); }						/**		 * Gets the atlantiser encrypt keys.		 */		public function get encryptKeys():Array { return getData("encryptKeys", []); }				/**		 * Sets the atlantiser encrypt keys.		 */		public function set encryptKeys(value:Array):void { setData("encryptKeys", value); }						/**		 * Gets the atlantiser smileyser state.		 */		public function get smileyser():Boolean { return getData("smileyser", true); }				/**		 * Sets the atlantiser smileyser state.		 */		public function set smileyser(value:Boolean):void { setData("smileyser", value); }						/**		 * Gets the atlantiser enteriser state.		 */		public function get enteriser():Boolean { return getData("enteriser", true); }				/**		 * Sets the atlantiser enteriser state.		 */		public function set enteriser(value:Boolean):void { setData("enteriser", value); }						/**		 * Gets the atlantiser wordiser state.		 */		public function get wordiser():Boolean { return getData("wordiser", true); }				/**		 * Sets the atlantiser wordiser state.		 */		public function set wordiser(value:Boolean):void { setData("wordiser", value); }						/**		 * Gets the atlantiser bbCodeiser state.		 */		public function get bbCodeiser():Boolean { return getData("bbCodeiser", true); }				/**		 * Sets the atlantiser bbCodeiser state.		 */		public function set bbCodeiser(value:Boolean):void { setData("bbCodeiser", value); }						/**		 * Get the GPS disclaimer agreed state.		 */		public function get gpsDisclaimerAgreed():Boolean { return getData("gpsDiscAgree", false); }				/**		 * Flags the GPS disclaimer as agreed.		 */		public function set gpsDisclaimerAgreed(value:Boolean):void { setData("gpsDiscAgree", value); }				/**		 * Get the GPS help read state.		 */		public function get gpsHelpRead():Boolean { return getData("gpsHelpRead", false); }				/**		 * Set the GPS help read state.		 */		public function set gpsHelpRead(value:Boolean):void { setData("gpsHelpRead", value); }								/**		 * Gets the GPS system window position.		 */		public function get gpsSystemWindowPos():Object { return getData("gpsSysWinPos", {x:int.MAX_VALUE, y:int.MAX_VALUE}); }				/**		 * Sets the GPS system window position.		 */		public function set gpsSystemWindowPos(value:Object):void { setData("gpsSysWinPos", value); }								/**		 * Gets the dolmens system window position.		 */		public function get dolmenSystemWindowPos():Object { return getData("dolSysWinPos", {x:int.MAX_VALUE, y:int.MAX_VALUE}); }				/**		 * Sets the dolmens system window position.		 */		public function set dolmenSystemWindowPos(value:Object):void { setData("dolSysWinPos", value); }				/**		 * Gets the user's GUID.		 *///		public function get guid():String {//			if(getData("guid", -1) == -1) {//				var seed:Number = new Date().getTime() + Math.random();//				setData("guid", SHA1.hash(seed.toString()));//			}//			return getData("guid", -1);//		}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Gets a SharedObject's data		 * 		 * @param id		datas ID.		 * @param value		data's value.		 */		public function setData(id:String, value:*):void {			var ba:ByteArray = new ByteArray();			ba.writeObject(value);			EncryptedLocalStore.setItem(id, ba);			_cache[id] = value;		}		/**		 * Gets a SharedObject's data.<p>		 * 		 * @param id			datas ID.		 * @param defaultValue	default value returned if the data does not exist yet.		 * 		 * @return	the data's value or the defaultValue parameter.		 */		public function getData(id:String, defaultValue:*):* {			if(_cache[id] == undefined) {				if(EncryptedLocalStore.getItem(id) == null) {					var ba:ByteArray = new ByteArray();					ba.writeObject(defaultValue);					EncryptedLocalStore.setItem(id, ba);					_cache[id] = defaultValue;					return defaultValue;				}else{					_cache[id] = EncryptedLocalStore.getItem(id).readObject();				}			}			return _cache[id];		}				/**		 * Registers a vote.		 * 		 * @param id	item's id to register the vote of.		 */		public function vote(id:String):void {			var a:Object = getData("vote", {}) as Object;			a[id] = true;			setData("vote", a);		}				/**		 * Unregisters a vote.		 * 		 * @param id	item's id to unregister the vote of.		 */		public function removeVote(id:String):void {			var a:Object = getData("vote", {}) as Object;			a[id] = false;			setData("vote", a);		}				/**		 * Gets if the user can vote for an item.		 * 		 * @param id	item's id to get if the vote is enabled for.		 */		public function canVote(id:String):Boolean{			var a:Object = getData("vote", []) as Object;			return a[id] !== true;		}				/**		 * Gets if a dolmen has been touched.		 */		public function isDolmenTouched(dolmen:Point):Boolean {			return getData("dolTouch", [])[dolmen.x + ":" + dolmen.y] === true;		}				/**		 * Flags a dolmen as touched.		 */		public function flagDolmenAsTouched(dolmen:Point3D):void {			var d:Array = getData("dolTouch", []);			d[dolmen.x + ":" + dolmen.y] = true;			setData("dolTouch", d);		}				/**		 * Adds a KPP to the saved list.		 */		public function addKpp(id:String):void {			var list:Array = getData("kpps", []);			list.push({id:id, t:new Date().getTime()});			setData("kpps", list);		}				/**		 * Gets the KPPs		 */		public function getKpps():Vector.<KPPEntry> {			var list:Array = getData("kpps", []);			var i:int, len:int, ret:Vector.<KPPEntry>;			len = list.length;			ret = new Vector.<KPPEntry>(len, true);			for(i = 0; i < len; ++i) {				ret[i] = new KPPEntry(list[i]);			}			return ret;		}				/**		 * Removes a KPP from the saved list.		 */		public function removeKpp(id:String):void {			var list:Array = getData("kpps", []);			var i:int, len:int;			len = list.length;			for(i = 0; i < len; ++i) {				if(list[i].id == id) {					list.splice(i, 1);					break;				}			}			setData("kpps", list);		}										/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes some vars and the statics sharedObjects.<br>		 */		private function initialize():void {//			setData("kpps", []);			_cache = new Dictionary();		}
	}}internal class SingletonEnforcer{}