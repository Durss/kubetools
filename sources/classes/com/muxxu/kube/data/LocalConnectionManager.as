package com.muxxu.kube.data {	import com.muxxu.kube.events.LocalConnectionManagerEvent;	import com.muxxu.kube.vo.Point3D;	import com.nurun.structure.environnement.configuration.Config;	import flash.errors.IllegalOperationError;	import flash.events.EventDispatcher;	import flash.events.SecurityErrorEvent;	import flash.events.StatusEvent;	import flash.net.LocalConnection;	import flash.utils.setTimeout;	/**	 * Singleton LocalConnectionManager	 * 	 * @author Francois	 */	public class LocalConnectionManager extends EventDispatcher {				private static var _instance:LocalConnectionManager;		private var _lcClient:Object;
		private var _lcReceive:LocalConnection;
		private var _lcSend:LocalConnection;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>LocalConnectionManager</code>.		 */		public function LocalConnectionManager(enforcer:SingletonEnforcer) {			if(enforcer == null) {				throw new IllegalOperationError("A singleton can't be instanciated. Use static accessor 'getInstance()'!");			}			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter.		 */		public static function getInstance():LocalConnectionManager {			if(_instance == null)_instance = new  LocalConnectionManager(new SingletonEnforcer());			return _instance;			}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Sets the current coordinates the user is at.		 */		public function setZoneCoords(coords:Object):void {			dispatchEvent(new LocalConnectionManagerEvent(LocalConnectionManagerEvent.ENTER_ZONE, new Point3D(coords.x, coords.y)));		}				/**		 * Called when a dolmen is touched		 */		private function dolmenTouched(coords:Object):void {			dispatchEvent(new LocalConnectionManagerEvent(LocalConnectionManagerEvent.DOLMEN_TOUCHED, new Point3D(coords.x, coords.y)));		}				/**		 * Called when the exact coordinates of a kube are available		 */		private function kubeCoords(coords:Object):void {			trace(coords.x+" :: "+coords.y+" :: "+coords.z);			dispatchEvent(new LocalConnectionManagerEvent(LocalConnectionManagerEvent.EXACT_COORDINATES, new Point3D(coords.x, coords.y, coords.z)));		}				/**		 * Gets the current user's position.		 */		public function getCurrentZone():void {			_lcSend.send(Config.getVariable("lcReceive"), "getCurrentZone");		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {			_lcClient = {"setZoneCoords":setZoneCoords, "dolmenTouched":dolmenTouched, "kubeCoords":kubeCoords};//Prevents from access problem when obfuscated			_lcReceive = new LocalConnection();			_lcReceive.client = _lcClient;			_lcReceive.allowDomain("*");						_lcSend = new LocalConnection();			_lcSend.addEventListener(StatusEvent.STATUS, statusEventHandler);			_lcSend.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);						connect();		}		/**		 * Connects to the LocalConnection emmiter.		 */		private function connect():void {			try {				_lcReceive.connect(Config.getVariable("lcSend"));			}catch(e:Error) {				setTimeout(connect, 1000);			}		}		/**		 * Called when a LocalConnection event occurs.		 */		private function statusEventHandler(event:StatusEvent):void {			switch (event.level) {				case "status":				break;			case "error":				dispatchEvent(new LocalConnectionManagerEvent(LocalConnectionManagerEvent.LC_CONNECT_ERROR));				break;			}		}				/**		 * Called if a sandbox error occurs		 */		private function securityErrorHandler(event:SecurityErrorEvent):void {			dispatchEvent(new LocalConnectionManagerEvent(LocalConnectionManagerEvent.LC_SECURITY_ERROR));		}			}}internal class SingletonEnforcer{}