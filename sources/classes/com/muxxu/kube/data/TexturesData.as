package com.muxxu.kube.data {	import com.muxxu.kube.vo.Texture;	import com.nurun.core.commands.SequentialCommand;	import flash.errors.IllegalOperationError;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;	/**	 * Contains all the texture's data.	 * 	 * @author Francois	 */	public class TexturesData extends EventDispatcher {				private static var _instance:TexturesData;		private var _textures:Vector.<Texture>;		private var _texturesIdsRels:Dictionary;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TexturesData</code>.<br>		 */		public function TexturesData(enforcer:SingletonEnforcer) {			if(enforcer == null) throw new IllegalOperationError("A singleton cannot be instanciated!");			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():TexturesData {			if(_instance == null)_instance = new  TexturesData(new SingletonEnforcer());			return _instance;			}				/**		 * Gets the number of textures available.		 */		public function get length():int { return _textures.length; }				/**		 * Gets the texture's references.		 */		public function get textures():Vector.<Texture> { return _textures; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Populates the data manager.		 */		public function populate(xml:XML):SequentialCommand {			var i:int, len:int, nodes:XMLList, texture:Texture, cmds:SequentialCommand, landID:String;			nodes = xml.child("textures").child("texture");			len = nodes.length();			cmds = new SequentialCommand();			for(i = 0; i < len; ++i) {				landID	= nodes[i].@landscapeID;				texture	= new Texture(nodes[i], landID, xml.child("landscapes").child("landscape").(@id == landID)[0]);				cmds.addCommand(texture.loadCommand);				_textures.push(texture);				_texturesIdsRels[texture.id] = texture;			}			return cmds;		}				/**		 * Gets a texture's reference by its ID.		 */		public function getTextureById(id:String):Texture {			return _texturesIdsRels[id] as Texture;		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_texturesIdsRels = new Dictionary();			_textures = new Vector.<Texture>();		}		public function clean():void {			
		}
	}}internal class SingletonEnforcer{}