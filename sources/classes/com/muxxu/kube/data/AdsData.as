package com.muxxu.kube.data {	import com.muxxu.kube.crypto.RequestEncrypter;	import com.muxxu.kube.events.AdsDataEvent;	import com.muxxu.kube.utils.HTTPPath;	import com.muxxu.kube.vo.Ad;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	/**	 * Singleton AdsData	 * 	 * @author Francois	 */	public class AdsData extends EventDispatcher {				private static var _instance:AdsData;		private var _ads:Vector.<Ad>;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>AdsData</code>.		 */		public function AdsData(enforcer:SingletonEnforcer) {			if(enforcer == null) {				throw new IllegalOperationError("A singleton can't be instanciated. Use static accessor 'getInstance()'!");			}			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter.		 */		public static function getInstance():AdsData {			if(_instance == null)_instance = new  AdsData(new SingletonEnforcer());			return _instance;			}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Loads ads.		 * 		 * @param offset	index offset.		 * @param length	number of results.		 */		public function load(offset:int = 0, length:int = 30):void {			var urlVars:URLVariables	= new URLVariables();			urlVars["offset"]			= offset;			urlVars["length"]			= length;						var req:URLRequest			= new URLRequest(HTTPPath.getPath("getAds"));            req.data					= RequestEncrypter.encrypt(urlVars);			req.method					= URLRequestMethod.POST;			var loader:URLLoader		= new URLLoader();			loader.addEventListener(Event.COMPLETE, getAdCompleteHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR, getAdErrorHandler);			loader.load(req);		}
		/**		 * Saves an add.		 */		public function saveAd(title:String, message:String, kubes:String):void {			var urlVars:URLVariables	= new URLVariables();			urlVars["pseudo"]			= SharedObjectManager.getInstance().userName;			urlVars["kubes"]			= escape(kubes);			urlVars["title"]			= title;			urlVars["message"]			= message;			urlVars["uid"]				= SharedObjectManager.getInstance().userIdCrp;						var req:URLRequest			= new URLRequest(HTTPPath.getPath("addAd"));            req.data					= RequestEncrypter.encrypt(urlVars);			req.method					= URLRequestMethod.POST;			var loader:URLLoader		= new URLLoader();			loader.addEventListener(Event.COMPLETE, addAdCompleteHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR, addAdErrorHandler);			loader.load(req);		}
								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		private function initialize():void {		}										//__________________________________________________________ SERVER RESULTS				/**		 * Called when Ad add completes.		 */		private function addAdCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);			}catch(error:Error) {				resultCode = 100;			}			if(resultCode > 2 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				dispatchEvent(new AdsDataEvent(AdsDataEvent.ADD_AD_COMPLETE));				load();			}else{				dispatchEvent(new AdsDataEvent(AdsDataEvent.ADD_AD_ERROR, resultCode));			}		}				/**		 * Called if Ad add fails.		 */		private function addAdErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new AdsDataEvent(AdsDataEvent.ADD_AD_ERROR, 101));		}						/**		 * Called when ads loading completes.		 */		private function getAdCompleteHandler(event:Event):void {			var loader:URLLoader = event.target as URLLoader;			var resultCode:int;			try{				var data:XML = new XML(loader.data);				resultCode = parseInt(data.child("result")[0]);				var i:int, len:int, ads:XMLList;				ads = data.child("ads")[0].child("ad");				len = ads.length();				_ads = new Vector.<Ad>(len, true);				for(i = 0; i < len; ++i) {					_ads[i] = new Ad(ads[i]);				}			}catch(error:Error) {				resultCode = 100;				trace(error.message);			}			if(resultCode > 2 && resultCode < 100) resultCode = 100;			if(resultCode == 0) {				dispatchEvent(new AdsDataEvent(AdsDataEvent.GET_ADS_COMPLETE, 0, _ads));			}else{				dispatchEvent(new AdsDataEvent(AdsDataEvent.GET_ADS_ERROR, resultCode));			}		}				/**		 * Called if ads loading fails.		 */		private function getAdErrorHandler(event:IOErrorEvent):void {			dispatchEvent(new AdsDataEvent(AdsDataEvent.GET_ADS_ERROR, 101));		}
	}}internal class SingletonEnforcer{}